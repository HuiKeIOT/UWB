
UWB_CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d6c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f18  08006f18  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08006f18  08006f18  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f18  08006f18  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002180  20000180  080070a0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002300  080070a0  00022300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_line   000142f5  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001ca44  00000000  00000000  0003449e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004278  00000000  00000000  00050ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001650  00000000  00000000  00055160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007eb4c  00000000  00000000  000567b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001448  00000000  00000000  000d5300  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000192e5  00000000  00000000  000d6748  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efa2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a9c  00000000  00000000  000efaa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e64 	.word	0x08006e64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08006e64 	.word	0x08006e64

08000150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000150:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000152:	e003      	b.n	800015c <LoopCopyDataInit>

08000154 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000154:	4b0b      	ldr	r3, [pc, #44]	; (8000184 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000156:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000158:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800015a:	3104      	adds	r1, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800015c:	480a      	ldr	r0, [pc, #40]	; (8000188 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000160:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000162:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000164:	d3f6      	bcc.n	8000154 <CopyDataInit>
  ldr r2, =_sbss
 8000166:	4a0a      	ldr	r2, [pc, #40]	; (8000190 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000168:	e002      	b.n	8000170 <LoopFillZerobss>

0800016a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800016a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800016c:	f842 3b04 	str.w	r3, [r2], #4

08000170 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000170:	4b08      	ldr	r3, [pc, #32]	; (8000194 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000172:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000174:	d3f9      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000176:	f000 ff2b 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800017a:	f006 fe47 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017e:	f000 f8d5 	bl	800032c <main>
  bx lr
 8000182:	4770      	bx	lr
  ldr r3, =_sidata
 8000184:	08006f20 	.word	0x08006f20
  ldr r0, =_sdata
 8000188:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800018c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000190:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000194:	20002300 	.word	0x20002300

08000198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000198:	e7fe      	b.n	8000198 <ADC1_2_IRQHandler>
	...

0800019c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	4a06      	ldr	r2, [pc, #24]	; (80001c4 <vApplicationGetIdleTaskMemory+0x28>)
 80001ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	4a05      	ldr	r2, [pc, #20]	; (80001c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2280      	movs	r2, #128	; 0x80
 80001b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	2000019c 	.word	0x2000019c
 80001c8:	200001f0 	.word	0x200001f0

080001cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uwb */
  osThreadDef(uwb, uwb_task, osPriorityNormal, 0, 128);
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <MX_FREERTOS_Init+0x30>)
 80001d4:	1d3c      	adds	r4, r7, #4
 80001d6:	461d      	mov	r5, r3
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uwbHandle = osThreadCreate(osThread(uwb), NULL);
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f004 f949 	bl	8004480 <osThreadCreate>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x34>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001f4:	bf00      	nop
 80001f6:	3720      	adds	r7, #32
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bdb0      	pop	{r4, r5, r7, pc}
 80001fc:	08006e80 	.word	0x08006e80
 8000200:	20001360 	.word	0x20001360

08000204 <uwb_task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_uwb_task */
void uwb_task(void const * argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800020c:	f000 fa76 	bl	80006fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN uwb_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f004 f981 	bl	8004518 <osDelay>
 8000216:	e7fb      	b.n	8000210 <uwb_task+0xc>

08000218 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	4b3b      	ldr	r3, [pc, #236]	; (800031c <MX_GPIO_Init+0x104>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a3a      	ldr	r2, [pc, #232]	; (800031c <MX_GPIO_Init+0x104>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b38      	ldr	r3, [pc, #224]	; (800031c <MX_GPIO_Init+0x104>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <MX_GPIO_Init+0x104>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a34      	ldr	r2, [pc, #208]	; (800031c <MX_GPIO_Init+0x104>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b32      	ldr	r3, [pc, #200]	; (800031c <MX_GPIO_Init+0x104>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	60bb      	str	r3, [r7, #8]
 800025a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025c:	4b2f      	ldr	r3, [pc, #188]	; (800031c <MX_GPIO_Init+0x104>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a2e      	ldr	r2, [pc, #184]	; (800031c <MX_GPIO_Init+0x104>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b2c      	ldr	r3, [pc, #176]	; (800031c <MX_GPIO_Init+0x104>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0308 	and.w	r3, r3, #8
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_EN_Pin|DW_WUP_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 7110 	mov.w	r1, #576	; 0x240
 800027a:	4829      	ldr	r0, [pc, #164]	; (8000320 <MX_GPIO_Init+0x108>)
 800027c:	f001 f948 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000280:	2301      	movs	r3, #1
 8000282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000284:	4b27      	ldr	r3, [pc, #156]	; (8000324 <MX_GPIO_Init+0x10c>)
 8000286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	4619      	mov	r1, r3
 8000292:	4823      	ldr	r0, [pc, #140]	; (8000320 <MX_GPIO_Init+0x108>)
 8000294:	f000 ffe2 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA7 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000298:	f240 53be 	movw	r3, #1470	; 0x5be
 800029c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800029e:	2303      	movs	r3, #3
 80002a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	481d      	ldr	r0, [pc, #116]	; (8000320 <MX_GPIO_Init+0x108>)
 80002aa:	f000 ffd7 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80002ae:	2340      	movs	r3, #64	; 0x40
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ba:	2303      	movs	r3, #3
 80002bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	4619      	mov	r1, r3
 80002c4:	4816      	ldr	r0, [pc, #88]	; (8000320 <MX_GPIO_Init+0x108>)
 80002c6:	f000 ffc9 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80002ca:	2347      	movs	r3, #71	; 0x47
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ce:	2303      	movs	r3, #3
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4813      	ldr	r0, [pc, #76]	; (8000328 <MX_GPIO_Init+0x110>)
 80002da:	f000 ffbf 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_WUP_Pin;
 80002de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002e4:	2311      	movs	r3, #17
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ec:	2303      	movs	r3, #3
 80002ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_WUP_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	480a      	ldr	r0, [pc, #40]	; (8000320 <MX_GPIO_Init+0x108>)
 80002f8:	f000 ffb0 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_GPIO_Init+0x10c>)
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000304:	2302      	movs	r3, #2
 8000306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <MX_GPIO_Init+0x110>)
 8000310:	f000 ffa4 	bl	800125c <HAL_GPIO_Init>

}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800
 8000324:	10110000 	.word	0x10110000
 8000328:	40010c00 	.word	0x40010c00

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f000 fe82 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f809 	bl	800034a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f7ff ff6e 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 800033c:	f000 f878 	bl	8000430 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000340:	f7ff ff44 	bl	80001cc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000344:	f004 f895 	bl	8004472 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000348:	e7fe      	b.n	8000348 <main+0x1c>

0800034a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b094      	sub	sp, #80	; 0x50
 800034e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000354:	2228      	movs	r2, #40	; 0x28
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f006 fd7b 	bl	8006e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 ffaf 	bl	8002304 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ac:	f000 f83a 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2102      	movs	r1, #2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fa19 	bl	8002804 <HAL_RCC_ClockConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003d8:	f000 f824 	bl	8000424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003dc:	2310      	movs	r3, #16
 80003de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fbc4 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003f2:	f000 f817 	bl	8000424 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3750      	adds	r7, #80	; 0x50
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d101      	bne.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000412:	f000 fe27 	bl	8001064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40012c00 	.word	0x40012c00

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_SPI1_Init+0x64>)
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_SPI1_Init+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_SPI1_Init+0x64>)
 800045c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_SPI1_Init+0x64>)
 8000464:	2220      	movs	r2, #32
 8000466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_SPI1_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_SPI1_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_SPI1_Init+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_SPI1_Init+0x64>)
 800047c:	220a      	movs	r2, #10
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_SPI1_Init+0x64>)
 8000482:	f002 fc2d 	bl	8002ce0 <HAL_SPI_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800048c:	f7ff ffca 	bl	8000424 <Error_Handler>
  }

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20001364 	.word	0x20001364
 8000498:	40013000 	.word	0x40013000

0800049c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a2f      	ldr	r2, [pc, #188]	; (8000574 <HAL_SPI_MspInit+0xd8>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d156      	bne.n	800056a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004bc:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2d      	ldr	r2, [pc, #180]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a27      	ldr	r2, [pc, #156]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004f2:	f043 0308 	orr.w	r3, r3, #8
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <HAL_SPI_MspInit+0xdc>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0308 	and.w	r3, r3, #8
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <HAL_SPI_MspInit+0xe0>)
 800051a:	f000 fe9f 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 800051e:	2328      	movs	r3, #40	; 0x28
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	4813      	ldr	r0, [pc, #76]	; (8000580 <HAL_SPI_MspInit+0xe4>)
 8000532:	f000 fe93 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DW_MISO_Pin;
 8000536:	2310      	movs	r3, #16
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <HAL_SPI_MspInit+0xe4>)
 800054a:	f000 fe87 	bl	800125c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_SPI_MspInit+0xe8>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000556:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_SPI_MspInit+0xe8>)
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40013000 	.word	0x40013000
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800
 8000580:	40010c00 	.word	0x40010c00
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_MspInit+0x68>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_MspInit+0x68>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_MspInit+0x68>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <HAL_MspInit+0x68>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x68>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	210f      	movs	r1, #15
 80005c2:	f06f 0001 	mvn.w	r0, #1
 80005c6:	f000 fe1e 	bl	8001206 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x6c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x6c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2019      	movs	r0, #25
 800060e:	f000 fdfa 	bl	8001206 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000612:	2019      	movs	r0, #25
 8000614:	f000 fe13 	bl	800123e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_InitTick+0x9c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_InitTick+0x9c>)
 800061e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_InitTick+0x9c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa4c 	bl	8002ad8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000640:	f002 fa36 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8000644:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_InitTick+0xa0>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	0c9b      	lsrs	r3, r3, #18
 8000650:	3b01      	subs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_InitTick+0xa4>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_InitTick+0xa8>)
 8000658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_InitTick+0xa4>)
 800065c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_InitTick+0xa4>)
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_InitTick+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <HAL_InitTick+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <HAL_InitTick+0xa4>)
 8000676:	f002 fb94 	bl	8002da2 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <HAL_InitTick+0xa4>)
 8000682:	f002 fbc2 	bl	8002e0a <HAL_TIM_Base_Start_IT>
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	431bde83 	.word	0x431bde83
 800069c:	200013bc 	.word	0x200013bc
 80006a0:	40012c00 	.word	0x40012c00

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <HardFault_Handler+0x4>

080006b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <BusFault_Handler+0x4>

080006c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <UsageFault_Handler+0x4>

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006da:	f001 f838 	bl	800174e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20001e90 	.word	0x20001e90

080006e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <TIM1_UP_IRQHandler+0x10>)
 80006ee:	f002 fbaf 	bl	8002e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200013bc 	.word	0x200013bc

080006fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000700:	2200      	movs	r2, #0
 8000702:	4912      	ldr	r1, [pc, #72]	; (800074c <MX_USB_DEVICE_Init+0x50>)
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_USB_DEVICE_Init+0x54>)
 8000706:	f005 faf5 	bl	8005cf4 <USBD_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000710:	f7ff fe88 	bl	8000424 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000714:	490f      	ldr	r1, [pc, #60]	; (8000754 <MX_USB_DEVICE_Init+0x58>)
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_USB_DEVICE_Init+0x54>)
 8000718:	f005 fb17 	bl	8005d4a <USBD_RegisterClass>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000722:	f7ff fe7f 	bl	8000424 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000726:	490c      	ldr	r1, [pc, #48]	; (8000758 <MX_USB_DEVICE_Init+0x5c>)
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_USB_DEVICE_Init+0x54>)
 800072a:	f005 fa77 	bl	8005c1c <USBD_CDC_RegisterInterface>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000734:	f7ff fe76 	bl	8000424 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USB_DEVICE_Init+0x54>)
 800073a:	f005 fb1f 	bl	8005d7c <USBD_Start>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000744:	f7ff fe6e 	bl	8000424 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000010 	.word	0x20000010
 8000750:	200013fc 	.word	0x200013fc
 8000754:	2000007c 	.word	0x2000007c
 8000758:	20000000 	.word	0x20000000

0800075c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	4905      	ldr	r1, [pc, #20]	; (8000778 <CDC_Init_FS+0x1c>)
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <CDC_Init_FS+0x20>)
 8000766:	f005 fa6f 	bl	8005c48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800076a:	4905      	ldr	r1, [pc, #20]	; (8000780 <CDC_Init_FS+0x24>)
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <CDC_Init_FS+0x20>)
 800076e:	f005 fa84 	bl	8005c7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000774:	4618      	mov	r0, r3
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20001aa8 	.word	0x20001aa8
 800077c:	200013fc 	.word	0x200013fc
 8000780:	200016c0 	.word	0x200016c0

08000784 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000788:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b23      	cmp	r3, #35	; 0x23
 80007a8:	d84a      	bhi.n	8000840 <CDC_Control_FS+0xac>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <CDC_Control_FS+0x1c>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	08000841 	.word	0x08000841
 80007b4:	08000841 	.word	0x08000841
 80007b8:	08000841 	.word	0x08000841
 80007bc:	08000841 	.word	0x08000841
 80007c0:	08000841 	.word	0x08000841
 80007c4:	08000841 	.word	0x08000841
 80007c8:	08000841 	.word	0x08000841
 80007cc:	08000841 	.word	0x08000841
 80007d0:	08000841 	.word	0x08000841
 80007d4:	08000841 	.word	0x08000841
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000841 	.word	0x08000841
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000841 	.word	0x08000841
 80007e8:	08000841 	.word	0x08000841
 80007ec:	08000841 	.word	0x08000841
 80007f0:	08000841 	.word	0x08000841
 80007f4:	08000841 	.word	0x08000841
 80007f8:	08000841 	.word	0x08000841
 80007fc:	08000841 	.word	0x08000841
 8000800:	08000841 	.word	0x08000841
 8000804:	08000841 	.word	0x08000841
 8000808:	08000841 	.word	0x08000841
 800080c:	08000841 	.word	0x08000841
 8000810:	08000841 	.word	0x08000841
 8000814:	08000841 	.word	0x08000841
 8000818:	08000841 	.word	0x08000841
 800081c:	08000841 	.word	0x08000841
 8000820:	08000841 	.word	0x08000841
 8000824:	08000841 	.word	0x08000841
 8000828:	08000841 	.word	0x08000841
 800082c:	08000841 	.word	0x08000841
 8000830:	08000841 	.word	0x08000841
 8000834:	08000841 	.word	0x08000841
 8000838:	08000841 	.word	0x08000841
 800083c:	08000841 	.word	0x08000841
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000840:	bf00      	nop
  }

  return (USBD_OK);
 8000842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <CDC_Receive_FS+0x24>)
 800085e:	f005 fa0c 	bl	8005c7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <CDC_Receive_FS+0x24>)
 8000864:	f005 fa1c 	bl	8005ca0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000868:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200013fc 	.word	0x200013fc

08000878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_PCD_MspInit+0x44>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d113      	bne.n	80008b2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_PCD_MspInit+0x48>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <HAL_PCD_MspInit+0x48>)
 8000890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_PCD_MspInit+0x48>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2014      	movs	r0, #20
 80008a8:	f000 fcad 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008ac:	2014      	movs	r0, #20
 80008ae:	f000 fcc6 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f005 fa96 	bl	8005e0c <USBD_LL_SetupStage>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	015b      	lsls	r3, r3, #5
 8000900:	4413      	add	r3, r2
 8000902:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fac9 	bl	8005ea2 <USBD_LL_DataOutStage>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	015b      	lsls	r3, r3, #5
 8000930:	4413      	add	r3, r2
 8000932:	333c      	adds	r3, #60	; 0x3c
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	4619      	mov	r1, r3
 800093a:	f005 fb23 	bl	8005f84 <USBD_LL_DataInStage>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8000954:	4618      	mov	r0, r3
 8000956:	f005 fc33 	bl	80061c0 <USBD_LL_SOF>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800096a:	2301      	movs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d001      	beq.n	800097a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8000976:	f7ff fd55 	bl	8000424 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8000980:	7bfa      	ldrb	r2, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f005 fbe3 	bl	8006150 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8000990:	4618      	mov	r0, r3
 8000992:	f005 fb9c 	bl	80060ce <USBD_LL_Reset>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80009ae:	4618      	mov	r0, r3
 80009b0:	f005 fbdd 	bl	800616e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_PCD_SuspendCallback+0x30>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_PCD_SuspendCallback+0x30>)
 80009c2:	f043 0306 	orr.w	r3, r3, #6
 80009c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fbd7 	bl	8006196 <USBD_LL_Resume>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80009f8:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <USBD_LL_Init+0xac>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <USBD_LL_Init+0xb0>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <USBD_LL_Init+0xac>)
 8000a2e:	f000 fd87 	bl	8001540 <HAL_PCD_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8000a38:	f7ff fcf4 	bl	8000424 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000a42:	2318      	movs	r3, #24
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	f001 fc20 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000a52:	2358      	movs	r3, #88	; 0x58
 8000a54:	2200      	movs	r2, #0
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	f001 fc18 	bl	800228c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000a62:	23c0      	movs	r3, #192	; 0xc0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2181      	movs	r1, #129	; 0x81
 8000a68:	f001 fc10 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000a72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	f001 fc07 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2182      	movs	r1, #130	; 0x82
 8000a8c:	f001 fbfe 	bl	800228c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20001e90 	.word	0x20001e90
 8000aa0:	40005c00 	.word	0x40005c00

08000aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fe21 	bl	8001702 <HAL_PCD_Start>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f948 	bl	8000d5c <USBD_Get_USB_Status>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4603      	mov	r3, r0
 8000aea:	70fb      	strb	r3, [r7, #3]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70bb      	strb	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000b02:	78bb      	ldrb	r3, [r7, #2]
 8000b04:	883a      	ldrh	r2, [r7, #0]
 8000b06:	78f9      	ldrb	r1, [r7, #3]
 8000b08:	f000 ff54 	bl	80019b4 <HAL_PCD_EP_Open>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f922 	bl	8000d5c <USBD_Get_USB_Status>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000b40:	78fa      	ldrb	r2, [r7, #3]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 ff95 	bl	8001a74 <HAL_PCD_EP_Close>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f903 	bl	8000d5c <USBD_Get_USB_Status>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000b7e:	78fa      	ldrb	r2, [r7, #3]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f83f 	bl	8001c06 <HAL_PCD_EP_SetStall>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f8e4 	bl	8000d5c <USBD_Get_USB_Status>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f87a 	bl	8001cba <HAL_PCD_EP_ClrStall>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f8c5 	bl	8000d5c <USBD_Get_USB_Status>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000bf2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8000bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da08      	bge.n	8000c0e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	015b      	lsls	r3, r3, #5
 8000c06:	4413      	add	r3, r2
 8000c08:	332a      	adds	r3, #42	; 0x2a
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	e008      	b.n	8000c20 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	015b      	lsls	r3, r3, #5
 8000c18:	4413      	add	r3, r2
 8000c1a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8000c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fe8e 	bl	800196a <HAL_PCD_SetAddress>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f881 	bl	8000d5c <USBD_Get_USB_Status>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	461a      	mov	r2, r3
 8000c74:	460b      	mov	r3, r1
 8000c76:	72fb      	strb	r3, [r7, #11]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000c8a:	893b      	ldrh	r3, [r7, #8]
 8000c8c:	7af9      	ldrb	r1, [r7, #11]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	f000 ff80 	bl	8001b94 <HAL_PCD_EP_Transmit>
 8000c94:	4603      	mov	r3, r0
 8000c96:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f85e 	bl	8000d5c <USBD_Get_USB_Status>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8000ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	460b      	mov	r3, r1
 8000cbc:	72fb      	strb	r3, [r7, #11]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000cd0:	893b      	ldrh	r3, [r7, #8]
 8000cd2:	7af9      	ldrb	r1, [r7, #11]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	f000 ff0f 	bl	8001af8 <HAL_PCD_EP_Receive>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f83b 	bl	8000d5c <USBD_Get_USB_Status>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8000cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff2e 	bl	8001b6c <HAL_PCD_EP_GetRxCount>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <USBD_static_malloc+0x14>)
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200003f0 	.word	0x200003f0

08000d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d817      	bhi.n	8000da0 <USBD_Get_USB_Status+0x44>
 8000d70:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <USBD_Get_USB_Status+0x1c>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d8f 	.word	0x08000d8f
 8000d80:	08000d95 	.word	0x08000d95
 8000d84:	08000d9b 	.word	0x08000d9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8000d8c:	e00b      	b.n	8000da6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	73fb      	strb	r3, [r7, #15]
    break;
 8000d92:	e008      	b.n	8000da6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
    break;
 8000d98:	e005      	b.n	8000da6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8000d9e:	e002      	b.n	8000da6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8000da0:	2302      	movs	r3, #2
 8000da2:	73fb      	strb	r3, [r7, #15]
    break;
 8000da4:	bf00      	nop
  }
  return usb_status;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2212      	movs	r2, #18
 8000dc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000dc6:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000002c 	.word	0x2000002c

08000dd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2204      	movs	r2, #4
 8000de8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000dea:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000040 	.word	0x20000040

08000dfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <USBD_FS_ProductStrDescriptor+0x34>)
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <USBD_FS_ProductStrDescriptor+0x38>)
 8000e14:	f005 ff1d 	bl	8006c52 <USBD_GetString>
 8000e18:	e004      	b.n	8000e24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <USBD_FS_ProductStrDescriptor+0x34>)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <USBD_FS_ProductStrDescriptor+0x38>)
 8000e20:	f005 ff17 	bl	8006c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200020fc 	.word	0x200020fc
 8000e34:	08006e9c 	.word	0x08006e9c

08000e38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4904      	ldr	r1, [pc, #16]	; (8000e58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000e4a:	f005 ff02 	bl	8006c52 <USBD_GetString>
  return USBD_StrDesc;
 8000e4e:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200020fc 	.word	0x200020fc
 8000e5c:	08006eb4 	.word	0x08006eb4

08000e60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	221a      	movs	r2, #26
 8000e70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000e72:	f000 f843 	bl	8000efc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000e76:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000044 	.word	0x20000044

08000e84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d105      	bne.n	8000ea2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <USBD_FS_ConfigStrDescriptor+0x38>)
 8000e9c:	f005 fed9 	bl	8006c52 <USBD_GetString>
 8000ea0:	e004      	b.n	8000eac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <USBD_FS_ConfigStrDescriptor+0x38>)
 8000ea8:	f005 fed3 	bl	8006c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200020fc 	.word	0x200020fc
 8000ebc:	08006ec8 	.word	0x08006ec8

08000ec0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000ed8:	f005 febb 	bl	8006c52 <USBD_GetString>
 8000edc:	e004      	b.n	8000ee8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000ee4:	f005 feb5 	bl	8006c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200020fc 	.word	0x200020fc
 8000ef8:	08006ed4 	.word	0x08006ed4

08000efc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <Get_SerialNum+0x44>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <Get_SerialNum+0x48>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <Get_SerialNum+0x4c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d009      	beq.n	8000f36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000f22:	2208      	movs	r2, #8
 8000f24:	4909      	ldr	r1, [pc, #36]	; (8000f4c <Get_SerialNum+0x50>)
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f814 	bl	8000f54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <Get_SerialNum+0x54>)
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f000 f80f 	bl	8000f54 <IntToUnicode>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	1ffff7e8 	.word	0x1ffff7e8
 8000f44:	1ffff7ec 	.word	0x1ffff7ec
 8000f48:	1ffff7f0 	.word	0x1ffff7f0
 8000f4c:	20000046 	.word	0x20000046
 8000f50:	20000056 	.word	0x20000056

08000f54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
 8000f6a:	e027      	b.n	8000fbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	0f1b      	lsrs	r3, r3, #28
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d80b      	bhi.n	8000f8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	0f1b      	lsrs	r3, r3, #28
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	440b      	add	r3, r1
 8000f84:	3230      	adds	r2, #48	; 0x30
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e00a      	b.n	8000fa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	0f1b      	lsrs	r3, r3, #28
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3237      	adds	r2, #55	; 0x37
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	3301      	adds	r3, #1
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	7dfa      	ldrb	r2, [r7, #23]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3d3      	bcc.n	8000f6c <IntToUnicode+0x18>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <SystemInit+0x5c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <SystemInit+0x5c>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <SystemInit+0x5c>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4911      	ldr	r1, [pc, #68]	; (800102c <SystemInit+0x5c>)
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <SystemInit+0x60>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <SystemInit+0x5c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <SystemInit+0x5c>)
 8000ff2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <SystemInit+0x5c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SystemInit+0x5c>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <SystemInit+0x5c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <SystemInit+0x5c>)
 800100e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001012:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SystemInit+0x5c>)
 8001016:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800101a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SystemInit+0x64>)
 800101e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001022:	609a      	str	r2, [r3, #8]
#endif 
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	f8ff0000 	.word	0xf8ff0000
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x28>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f8d1 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fad2 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fa98 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x1c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x20>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a03      	ldr	r2, [pc, #12]	; (8001084 <HAL_IncTick+0x20>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000068 	.word	0x20000068
 8001084:	200022fc 	.word	0x200022fc

08001088 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	200022fc 	.word	0x200022fc

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <__NVIC_EnableIRQ+0x34>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff4f 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff64 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ffb2 	bl	800118c <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff81 	bl	8001138 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff57 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e127      	b.n	80014c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001270:	2201      	movs	r2, #1
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8116 	bne.w	80014ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d034      	beq.n	8001300 <HAL_GPIO_Init+0xa4>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d80d      	bhi.n	80012b6 <HAL_GPIO_Init+0x5a>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x9a>
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d804      	bhi.n	80012ac <HAL_GPIO_Init+0x50>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d031      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d01c      	beq.n	80012e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e048      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d043      	beq.n	8001338 <HAL_GPIO_Init+0xdc>
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d01b      	beq.n	80012ec <HAL_GPIO_Init+0x90>
          break;
 80012b4:	e043      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012b6:	4a89      	ldr	r2, [pc, #548]	; (80014dc <HAL_GPIO_Init+0x280>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d026      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012bc:	4a87      	ldr	r2, [pc, #540]	; (80014dc <HAL_GPIO_Init+0x280>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d806      	bhi.n	80012d0 <HAL_GPIO_Init+0x74>
 80012c2:	4a87      	ldr	r2, [pc, #540]	; (80014e0 <HAL_GPIO_Init+0x284>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d020      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012c8:	4a86      	ldr	r2, [pc, #536]	; (80014e4 <HAL_GPIO_Init+0x288>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01d      	beq.n	800130a <HAL_GPIO_Init+0xae>
          break;
 80012ce:	e036      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d0:	4a85      	ldr	r2, [pc, #532]	; (80014e8 <HAL_GPIO_Init+0x28c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012d6:	4a85      	ldr	r2, [pc, #532]	; (80014ec <HAL_GPIO_Init+0x290>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d016      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012dc:	4a84      	ldr	r2, [pc, #528]	; (80014f0 <HAL_GPIO_Init+0x294>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0xae>
          break;
 80012e2:	e02c      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e028      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	3304      	adds	r3, #4
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e023      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	3308      	adds	r3, #8
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e01e      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	330c      	adds	r3, #12
 8001306:	623b      	str	r3, [r7, #32]
          break;
 8001308:	e019      	b.n	800133e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001312:	2304      	movs	r3, #4
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e012      	b.n	800133e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	611a      	str	r2, [r3, #16]
          break;
 800132a:	e008      	b.n	800133e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	615a      	str	r2, [r3, #20]
          break;
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d801      	bhi.n	8001348 <HAL_GPIO_Init+0xec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e001      	b.n	800134c <HAL_GPIO_Init+0xf0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3304      	adds	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2bff      	cmp	r3, #255	; 0xff
 8001352:	d802      	bhi.n	800135a <HAL_GPIO_Init+0xfe>
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x104>
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3b08      	subs	r3, #8
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	210f      	movs	r1, #15
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8096 	beq.w	80014ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <HAL_GPIO_Init+0x298>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <HAL_GPIO_Init+0x298>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x298>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a6:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x19e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x19a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_GPIO_Init+0x2a8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x196>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x192>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013fa:	2300      	movs	r3, #0
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140c:	493a      	ldr	r1, [pc, #232]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4938      	ldr	r1, [pc, #224]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4933      	ldr	r1, [pc, #204]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	492e      	ldr	r1, [pc, #184]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	4929      	ldr	r1, [pc, #164]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001466:	4013      	ands	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	491f      	ldr	r1, [pc, #124]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	491a      	ldr	r1, [pc, #104]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60cb      	str	r3, [r1, #12]
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4915      	ldr	r1, [pc, #84]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f aed0 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	10210000 	.word	0x10210000
 80014e0:	10110000 	.word	0x10110000
 80014e4:	10120000 	.word	0x10120000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10320000 	.word	0x10320000
 80014f0:	10220000 	.word	0x10220000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000
 8001508:	40011400 	.word	0x40011400
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af06      	add	r7, sp, #24
 8001546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0d3      	b.n	80016fa <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff f986 	bl	8000878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fe30 	bl	80031de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	687e      	ldr	r6, [r7, #4]
 8001586:	466d      	mov	r5, sp
 8001588:	f106 0410 	add.w	r4, r6, #16
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	602b      	str	r3, [r5, #0]
 8001594:	1d33      	adds	r3, r6, #4
 8001596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f001 fdf9 	bl	8003190 <USB_CoreInit>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a4      	b.n	80016fa <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fe2d 	bl	8003216 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e035      	b.n	800162e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4413      	add	r3, r2
 80015ca:	3329      	adds	r3, #41	; 0x29
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	015b      	lsls	r3, r3, #5
 80015d6:	4413      	add	r3, r2
 80015d8:	3328      	adds	r3, #40	; 0x28
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	b291      	uxth	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4413      	add	r3, r2
 80015ea:	3336      	adds	r3, #54	; 0x36
 80015ec:	460a      	mov	r2, r1
 80015ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	4413      	add	r3, r2
 80015f8:	332b      	adds	r3, #43	; 0x2b
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	4413      	add	r3, r2
 8001606:	3338      	adds	r3, #56	; 0x38
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	4413      	add	r3, r2
 8001614:	333c      	adds	r3, #60	; 0x3c
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	3302      	adds	r3, #2
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	4413      	add	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	3301      	adds	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3c4      	bcc.n	80015c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e031      	b.n	80016a2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	4413      	add	r3, r2
 8001646:	f203 1329 	addw	r3, r3, #297	; 0x129
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	015b      	lsls	r3, r3, #5
 8001654:	4413      	add	r3, r2
 8001656:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	4413      	add	r3, r2
 8001666:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	015b      	lsls	r3, r3, #5
 8001674:	4413      	add	r3, r2
 8001676:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	015b      	lsls	r3, r3, #5
 8001684:	4413      	add	r3, r2
 8001686:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	330a      	adds	r3, #10
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	3301      	adds	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3c8      	bcc.n	800163e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	687e      	ldr	r6, [r7, #4]
 80016b4:	466d      	mov	r5, sp
 80016b6:	f106 0410 	add.w	r4, r6, #16
 80016ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	602b      	str	r3, [r5, #0]
 80016c2:	1d33      	adds	r3, r6, #4
 80016c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f001 fdb1 	bl	800322e <USB_DevInit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00d      	b.n	80016fa <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fdef 	bl	80042d6 <USB_DevDisconnect>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001702 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_PCD_Start+0x16>
 8001714:	2302      	movs	r3, #2
 8001716:	e016      	b.n	8001746 <HAL_PCD_Start+0x44>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001720:	2101      	movs	r1, #1
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fb0f 	bl	8000d46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fdc8 	bl	80042c2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fd3a 	bl	80031b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fdc5 	bl	80042ea <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800176a:	d102      	bne.n	8001772 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 faf3 	bl	8001d58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fdb7 	bl	80042ea <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d112      	bne.n	80017ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff f8de 	bl	8000962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8de 	bl	800196a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fd99 	bl	80042ea <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017c2:	d10b      	bne.n	80017dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017d6:	b292      	uxth	r2, r2
 80017d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fd82 	bl	80042ea <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f0:	d10b      	bne.n	800180a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001804:	b292      	uxth	r2, r2
 8001806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fd6b 	bl	80042ea <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181e:	d126      	bne.n	800186e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0204 	bic.w	r2, r2, #4
 8001832:	b292      	uxth	r2, r2
 8001834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0208 	bic.w	r2, r2, #8
 800184a:	b292      	uxth	r2, r2
 800184c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff f8bf 	bl	80009d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001868:	b292      	uxth	r2, r2
 800186a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fd39 	bl	80042ea <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001882:	d13d      	bne.n	8001900 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0208 	orr.w	r2, r2, #8
 8001896:	b292      	uxth	r2, r2
 8001898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ae:	b292      	uxth	r2, r2
 80018b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018bc:	b29a      	uxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0204 	orr.w	r2, r2, #4
 80018c6:	b292      	uxth	r2, r2
 80018c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fd0a 	bl	80042ea <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d10b      	bne.n	80018fa <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018f4:	b292      	uxth	r2, r2
 80018f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff f850 	bl	80009a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fcf0 	bl	80042ea <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001914:	d10e      	bne.n	8001934 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001928:	b292      	uxth	r2, r2
 800192a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff f809 	bl	8000946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fcd6 	bl	80042ea <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001948:	d10b      	bne.n	8001962 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_PCD_SetAddress+0x1a>
 8001980:	2302      	movs	r3, #2
 8001982:	e013      	b.n	80019ac <HAL_PCD_SetAddress+0x42>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fc7d 	bl	800429c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	70fb      	strb	r3, [r7, #3]
 80019c6:	460b      	mov	r3, r1
 80019c8:	803b      	strh	r3, [r7, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da0b      	bge.n	80019f2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	3328      	adds	r3, #40	; 0x28
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	705a      	strb	r2, [r3, #1]
 80019f0:	e00b      	b.n	8001a0a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a16:	883a      	ldrh	r2, [r7, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	78ba      	ldrb	r2, [r7, #2]
 8001a20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d102      	bne.n	8001a40 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_PCD_EP_Open+0x9a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e00e      	b.n	8001a6c <HAL_PCD_EP_Open+0xb8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fc0b 	bl	8003278 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da0b      	bge.n	8001aa0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	3328      	adds	r3, #40	; 0x28
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	705a      	strb	r2, [r3, #1]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_EP_Close+0x5e>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00e      	b.n	8001af0 <HAL_PCD_EP_Close+0x7c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 feb7 	bl	8003854 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	460b      	mov	r3, r1
 8001b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	015b      	lsls	r3, r3, #5
 8001b10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 f816 	bl	8003b80 <USB_EPStartXfer>
 8001b54:	e005      	b.n	8001b62 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6979      	ldr	r1, [r7, #20]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 f80f 	bl	8003b80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	330a      	adds	r3, #10
 8001b82:	015b      	lsls	r3, r3, #5
 8001b84:	4413      	add	r3, r2
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	015b      	lsls	r3, r3, #5
 8001bac:	3328      	adds	r3, #40	; 0x28
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 ffc9 	bl	8003b80 <USB_EPStartXfer>
 8001bee:	e005      	b.n	8001bfc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 ffc2 	bl	8003b80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0207 	and.w	r2, r3, #7
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d901      	bls.n	8001c24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e046      	b.n	8001cb2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da0b      	bge.n	8001c44 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	015b      	lsls	r3, r3, #5
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	705a      	strb	r2, [r3, #1]
 8001c42:	e009      	b.n	8001c58 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_PCD_EP_SetStall+0x72>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e01c      	b.n	8001cb2 <HAL_PCD_EP_SetStall+0xac>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fa32 	bl	80040f0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f002 fb30 	bl	8004308 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d901      	bls.n	8001cd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e03a      	b.n	8001d4e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da0b      	bge.n	8001cf8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	015b      	lsls	r3, r3, #5
 8001ce8:	3328      	adds	r3, #40	; 0x28
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	705a      	strb	r2, [r3, #1]
 8001cf6:	e00b      	b.n	8001d10 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	015b      	lsls	r3, r3, #5
 8001d00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_EP_ClrStall+0x76>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e00e      	b.n	8001d4e <HAL_PCD_EP_ClrStall+0x94>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fa18 	bl	8004174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d60:	e282      	b.n	8002268 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d6c:	8afb      	ldrh	r3, [r7, #22]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001d76:	7d7b      	ldrb	r3, [r7, #21]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 8142 	bne.w	8002002 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d7e:	8afb      	ldrh	r3, [r7, #22]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d151      	bne.n	8001e2c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d98:	b29c      	uxth	r4, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3328      	adds	r3, #40	; 0x28
 8001dae:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	441a      	add	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dea:	2100      	movs	r1, #0
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fd93 	bl	8000918 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8234 	beq.w	8002268 <PCD_EP_ISR_Handler+0x510>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 822f 	bne.w	8002268 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e2a:	e21d      	b.n	8002268 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e32:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e3c:	8a7b      	ldrh	r3, [r7, #18]
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d033      	beq.n	8001eae <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3306      	adds	r3, #6
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f002 fa8e 	bl	80043a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e96:	4013      	ands	r3, r2
 8001e98:	b29c      	uxth	r4, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fd0c 	bl	80008c4 <HAL_PCD_SetupStageCallback>
 8001eac:	e1dc      	b.n	8002268 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f280 81d8 	bge.w	8002268 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	b29c      	uxth	r4, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3306      	adds	r3, #6
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d019      	beq.n	8001f3c <PCD_EP_ISR_Handler+0x1e4>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6959      	ldr	r1, [r3, #20]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f002 fa40 	bl	80043a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	441a      	add	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f34:	2100      	movs	r1, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fcd6 	bl	80008e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461c      	mov	r4, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	441c      	add	r4, r3
 8001f4e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001f52:	461c      	mov	r4, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10e      	bne.n	8001f7a <PCD_EP_ISR_Handler+0x222>
 8001f5c:	8823      	ldrh	r3, [r4, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	8023      	strh	r3, [r4, #0]
 8001f68:	8823      	ldrh	r3, [r4, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8023      	strh	r3, [r4, #0]
 8001f78:	e02d      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x27e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f80:	d812      	bhi.n	8001fa8 <PCD_EP_ISR_Handler+0x250>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <PCD_EP_ISR_Handler+0x244>
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	8023      	strh	r3, [r4, #0]
 8001fa6:	e016      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x27e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <PCD_EP_ISR_Handler+0x26a>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	b29c      	uxth	r4, r3
 8001fe8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001fec:	b29c      	uxth	r4, r3
 8001fee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001ff2:	b29c      	uxth	r4, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4ba2      	ldr	r3, [pc, #648]	; (8002284 <PCD_EP_ISR_Handler+0x52c>)
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
 8002000:	e132      	b.n	8002268 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f280 80d1 	bge.w	80021be <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	7d7b      	ldrb	r3, [r7, #21]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29a      	uxth	r2, r3
 800202c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002030:	4013      	ands	r3, r2
 8002032:	b29c      	uxth	r4, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	7d7b      	ldrb	r3, [r7, #21]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002044:	b292      	uxth	r2, r2
 8002046:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002048:	7d7b      	ldrb	r3, [r7, #21]
 800204a:	015b      	lsls	r3, r3, #5
 800204c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d121      	bne.n	80020a2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	3306      	adds	r3, #6
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002088:	8bfb      	ldrh	r3, [r7, #30]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d072      	beq.n	8002174 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88da      	ldrh	r2, [r3, #6]
 800209a:	8bfb      	ldrh	r3, [r7, #30]
 800209c:	f002 f983 	bl	80043a6 <USB_ReadPMA>
 80020a0:	e068      	b.n	8002174 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d021      	beq.n	8002100 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	3302      	adds	r3, #2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020e6:	8bfb      	ldrh	r3, [r7, #30]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02a      	beq.n	8002142 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6959      	ldr	r1, [r3, #20]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	891a      	ldrh	r2, [r3, #8]
 80020f8:	8bfb      	ldrh	r3, [r7, #30]
 80020fa:	f002 f954 	bl	80043a6 <USB_ReadPMA>
 80020fe:	e020      	b.n	8002142 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	3306      	adds	r3, #6
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800212a:	8bfb      	ldrh	r3, [r7, #30]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6959      	ldr	r1, [r3, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	895a      	ldrh	r2, [r3, #10]
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	f002 f932 	bl	80043a6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215c:	b29c      	uxth	r4, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <PCD_EP_ISR_Handler+0x530>)
 800216e:	4323      	orrs	r3, r4
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	441a      	add	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	8bfb      	ldrh	r3, [r7, #30]
 8002186:	441a      	add	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <PCD_EP_ISR_Handler+0x446>
 8002194:	8bfa      	ldrh	r2, [r7, #30]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	429a      	cmp	r2, r3
 800219c:	d206      	bcs.n	80021ac <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe fb9f 	bl	80008e8 <HAL_PCD_DataOutStageCallback>
 80021aa:	e008      	b.n	80021be <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	7819      	ldrb	r1, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fc9d 	bl	8001af8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d04f      	beq.n	8002268 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80021c8:	7d7b      	ldrb	r3, [r7, #21]
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	3328      	adds	r3, #40	; 0x28
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	7d7b      	ldrb	r3, [r7, #21]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	b29c      	uxth	r4, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	7d7b      	ldrb	r3, [r7, #21]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80021fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002202:	b29b      	uxth	r3, r3
 8002204:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	3302      	adds	r3, #2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	441a      	add	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fb62 	bl	8000918 <HAL_PCD_DataInStageCallback>
 8002254:	e008      	b.n	8002268 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	7819      	ldrb	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fc96 	bl	8001b94 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21b      	sxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f6ff ad74 	blt.w	8001d62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3724      	adds	r7, #36	; 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	ffff8080 	.word	0xffff8080
 8002288:	ffff80c0 	.word	0xffff80c0

0800228c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	4613      	mov	r3, r2
 800229c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	015b      	lsls	r3, r3, #5
 80022b2:	3328      	adds	r3, #40	; 0x28
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e006      	b.n	80022ca <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022bc:	897b      	ldrh	r3, [r7, #10]
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	80da      	strh	r2, [r3, #6]
 80022de:	e00b      	b.n	80022f8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2201      	movs	r2, #1
 80022e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e26c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	4b8f      	ldr	r3, [pc, #572]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x12c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e246      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x76>
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xbc>
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 80023c0:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe52 	bl	8001088 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fe4e 	bl	8001088 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1fa      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe4>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fe3e 	bl	8001088 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fe3a 	bl	8001088 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1e6      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x10c>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1ba      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fdf3 	bl	8001088 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fdef 	bl	8001088 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e19b      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fdd2 	bl	8001088 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fdce 	bl	8001088 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e17a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03a      	beq.n	8002588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7fe fdb2 	bl	8001088 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fdae 	bl	8001088 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e15a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 faf6 	bl	8002b38 <RCC_Delay>
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7fe fd98 	bl	8001088 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fd94 	bl	8001088 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d908      	bls.n	800257c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e140      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	42420000 	.word	0x42420000
 8002578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b9e      	ldr	r3, [pc, #632]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e9      	bne.n	800255c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b97      	ldr	r3, [pc, #604]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b94      	ldr	r3, [pc, #592]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a93      	ldr	r2, [pc, #588]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a8a      	ldr	r2, [pc, #552]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd55 	bl	8001088 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fd51 	bl	8001088 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0fd      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b81      	ldr	r3, [pc, #516]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x312>
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e02d      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x334>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x356>
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6c      	ldr	r2, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a66      	ldr	r2, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fd05 	bl	8001088 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fd01 	bl	8001088 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ab      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x37e>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fcef 	bl	8001088 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fceb 	bl	8001088 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e095      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8081 	beq.w	80027ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d061      	beq.n	80027bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d146      	bne.n	800278e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fcbf 	bl	8001088 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fcbb 	bl	8001088 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e067      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	492d      	ldr	r1, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a19      	ldr	r1, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	4927      	ldr	r1, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe fc8f 	bl	8001088 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fc8b 	bl	8001088 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e037      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x46a>
 800278c:	e02f      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fc78 	bl	8001088 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fc74 	bl	8001088 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e020      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x498>
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420060 	.word	0x42420060

08002804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0d0      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4965      	ldr	r1, [pc, #404]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d040      	beq.n	8002924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e073      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4936      	ldr	r1, [pc, #216]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fbc8 	bl	8001088 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe fbc4 	bl	8001088 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e053      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d210      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4922      	ldr	r1, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4601      	mov	r1, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	fa21 f303 	lsr.w	r3, r1, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1cc>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1d0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fe20 	bl	80005f8 <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08006f00 	.word	0x08006f00
 80029d0:	20000060 	.word	0x20000060
 80029d4:	20000064 	.word	0x20000064

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b490      	push	{r4, r7}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029e0:	1d3c      	adds	r4, r7, #4
 80029e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x40>
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x46>
 8002a16:	e02d      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c5b      	lsrs	r3, r3, #17
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a56:	fb02 f203 	mul.w	r2, r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	e004      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	623b      	str	r3, [r7, #32]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc90      	pop	{r4, r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	08006ee4 	.word	0x08006ee4
 8002a8c:	08006ef4 	.word	0x08006ef4
 8002a90:	40021000 	.word	0x40021000
 8002a94:	007a1200 	.word	0x007a1200
 8002a98:	003d0900 	.word	0x003d0900

08002a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000060 	.word	0x20000060

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab4:	f7ff fff2 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08006f10 	.word	0x08006f10

08002ad8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_GetClockConfig+0x58>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_RCC_GetClockConfig+0x58>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_GetClockConfig+0x58>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_GetClockConfig+0x58>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0207 	and.w	r2, r3, #7
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40022000 	.word	0x40022000

08002b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <RCC_Delay+0x34>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <RCC_Delay+0x38>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b54:	bf00      	nop
  }
  while (Delay --);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <RCC_Delay+0x1c>
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000060 	.word	0x20000060
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d07d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b94:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	61d3      	str	r3, [r2, #28]
 8002bac:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d118      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a42      	ldr	r2, [pc, #264]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fa58 	bl	8001088 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe fa54 	bl	8001088 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06d      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02e      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d027      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c18:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d014      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fa23 	bl	8001088 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fa1f 	bl	8001088 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e036      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4917      	ldr	r1, [pc, #92]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	490b      	ldr	r1, [pc, #44]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42420440 	.word	0x42420440

08002ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e053      	b.n	8002d9a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fd fbc5 	bl	800049c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	0c1a      	lsrs	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 0204 	and.w	r2, r2, #4
 8002d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01d      	b.n	8002df0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f815 	bl	8002df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f000 f961 	bl	80030a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0202 	mvn.w	r2, #2
 8002e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f8ed 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8e0 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f8ef 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0204 	mvn.w	r2, #4
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8c3 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8b6 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f8c5 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0208 	mvn.w	r2, #8
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f899 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f88c 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f89b 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0210 	mvn.w	r2, #16
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f86f 	bl	8003072 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f862 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f871 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0201 	mvn.w	r2, #1
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fa16 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d10e      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d107      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8bf 	bl	800317e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d10e      	bne.n	800302c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f835 	bl	8003096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d10e      	bne.n	8003058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0220 	mvn.w	r2, #32
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f88a 	bl	800316c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a29      	ldr	r2, [pc, #164]	; (8003160 <TIM_Base_SetConfig+0xb8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00b      	beq.n	80030d8 <TIM_Base_SetConfig+0x30>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d007      	beq.n	80030d8 <TIM_Base_SetConfig+0x30>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <TIM_Base_SetConfig+0xbc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0x30>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <TIM_Base_SetConfig+0xc0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d108      	bne.n	80030ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <TIM_Base_SetConfig+0xb8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00b      	beq.n	800310a <TIM_Base_SetConfig+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x62>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <TIM_Base_SetConfig+0xbc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x62>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <TIM_Base_SetConfig+0xc0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d108      	bne.n	800311c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <TIM_Base_SetConfig+0xb8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d103      	bne.n	8003150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	615a      	str	r2, [r3, #20]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800

0800316c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003190:	b084      	sub	sp, #16
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	f107 0014 	add.w	r0, r7, #20
 800319e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	b004      	add	sp, #16
 80031ae:	4770      	bx	lr

080031b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80031b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80031bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80031e6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80031ea:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	4013      	ands	r3, r2
 8003200:	b21b      	sxth	r3, r3
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800322e:	b084      	sub	sp, #16
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	f107 0014 	add.w	r0, r7, #20
 800323c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffa5 	bl	80031b0 <USB_EnableGlobalInt>

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003272:	b004      	add	sp, #16
 8003274:	4770      	bx	lr
	...

08003278 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003278:	b490      	push	{r4, r7}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	78db      	ldrb	r3, [r3, #3]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d819      	bhi.n	80032da <USB_ActivateEndpoint+0x62>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <USB_ActivateEndpoint+0x34>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032d1 	.word	0x080032d1
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	080032c7 	.word	0x080032c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80032bc:	89bb      	ldrh	r3, [r7, #12]
 80032be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c2:	81bb      	strh	r3, [r7, #12]
      break;
 80032c4:	e00d      	b.n	80032e2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80032c6:	89bb      	ldrh	r3, [r7, #12]
 80032c8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80032cc:	81bb      	strh	r3, [r7, #12]
      break;
 80032ce:	e008      	b.n	80032e2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80032d0:	89bb      	ldrh	r3, [r7, #12]
 80032d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d6:	81bb      	strh	r3, [r7, #12]
      break;
 80032d8:	e003      	b.n	80032e2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
      break;
 80032de:	e000      	b.n	80032e2 <USB_ActivateEndpoint+0x6a>
      break;
 80032e0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	89bb      	ldrh	r3, [r7, #12]
 80032ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	b29a      	uxth	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b29c      	uxth	r4, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	4b8a      	ldr	r3, [pc, #552]	; (8003558 <USB_ActivateEndpoint+0x2e0>)
 8003330:	4323      	orrs	r3, r4
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	7b1b      	ldrb	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 8112 	bne.w	8003564 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d067      	beq.n	8003418 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003348:	687c      	ldr	r4, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	441c      	add	r4, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	4423      	add	r3, r4
 800335c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003360:	461c      	mov	r4, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	88db      	ldrh	r3, [r3, #6]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29c      	uxth	r4, r3
 800337e:	4623      	mov	r3, r4
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <USB_ActivateEndpoint+0x13a>
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	b29c      	uxth	r4, r3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	441a      	add	r2, r3
 80033aa:	4b6c      	ldr	r3, [pc, #432]	; (800355c <USB_ActivateEndpoint+0x2e4>)
 80033ac:	4323      	orrs	r3, r4
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d018      	beq.n	80033ec <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d0:	b29c      	uxth	r4, r3
 80033d2:	f084 0320 	eor.w	r3, r4, #32
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <USB_ActivateEndpoint+0x2e0>)
 80033e4:	4323      	orrs	r3, r4
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
 80033ea:	e22b      	b.n	8003844 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003402:	b29c      	uxth	r4, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	4b52      	ldr	r3, [pc, #328]	; (8003558 <USB_ActivateEndpoint+0x2e0>)
 8003410:	4323      	orrs	r3, r4
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
 8003416:	e215      	b.n	8003844 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003418:	687c      	ldr	r4, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	441c      	add	r4, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	4423      	add	r3, r4
 800342c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003430:	461c      	mov	r4, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	88db      	ldrh	r3, [r3, #6]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003440:	687c      	ldr	r4, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	441c      	add	r4, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4423      	add	r3, r4
 8003454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003458:	461c      	mov	r4, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10e      	bne.n	8003480 <USB_ActivateEndpoint+0x208>
 8003462:	8823      	ldrh	r3, [r4, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800346a:	b29b      	uxth	r3, r3
 800346c:	8023      	strh	r3, [r4, #0]
 800346e:	8823      	ldrh	r3, [r4, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347a:	b29b      	uxth	r3, r3
 800347c:	8023      	strh	r3, [r4, #0]
 800347e:	e02d      	b.n	80034dc <USB_ActivateEndpoint+0x264>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b3e      	cmp	r3, #62	; 0x3e
 8003486:	d812      	bhi.n	80034ae <USB_ActivateEndpoint+0x236>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <USB_ActivateEndpoint+0x22a>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8023      	strh	r3, [r4, #0]
 80034ac:	e016      	b.n	80034dc <USB_ActivateEndpoint+0x264>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <USB_ActivateEndpoint+0x250>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29b      	uxth	r3, r3
 80034da:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29c      	uxth	r4, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <USB_ActivateEndpoint+0x2a6>
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	b29c      	uxth	r4, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <USB_ActivateEndpoint+0x2e8>)
 8003518:	4323      	orrs	r3, r4
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003534:	b29c      	uxth	r4, r3
 8003536:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800353a:	b29c      	uxth	r4, r3
 800353c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003540:	b29c      	uxth	r4, r3
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <USB_ActivateEndpoint+0x2e0>)
 800354e:	4323      	orrs	r3, r4
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]
 8003554:	e176      	b.n	8003844 <USB_ActivateEndpoint+0x5cc>
 8003556:	bf00      	nop
 8003558:	ffff8080 	.word	0xffff8080
 800355c:	ffff80c0 	.word	0xffff80c0
 8003560:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	b29c      	uxth	r4, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	4b96      	ldr	r3, [pc, #600]	; (80037e0 <USB_ActivateEndpoint+0x568>)
 8003588:	4323      	orrs	r3, r4
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800358e:	687c      	ldr	r4, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	441c      	add	r4, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4423      	add	r3, r4
 80035a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a6:	461c      	mov	r4, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	891b      	ldrh	r3, [r3, #8]
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8023      	strh	r3, [r4, #0]
 80035b6:	687c      	ldr	r4, [r7, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	441c      	add	r4, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4423      	add	r3, r4
 80035ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035ce:	461c      	mov	r4, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	895b      	ldrh	r3, [r3, #10]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 8088 	bne.w	80036f8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29c      	uxth	r4, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d014      	beq.n	800362a <USB_ActivateEndpoint+0x3b2>
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	b29c      	uxth	r4, r3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	4b70      	ldr	r3, [pc, #448]	; (80037e4 <USB_ActivateEndpoint+0x56c>)
 8003624:	4323      	orrs	r3, r4
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29c      	uxth	r4, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d014      	beq.n	800366c <USB_ActivateEndpoint+0x3f4>
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	b29c      	uxth	r4, r3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <USB_ActivateEndpoint+0x570>)
 8003666:	4323      	orrs	r3, r4
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	b29c      	uxth	r4, r3
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <USB_ActivateEndpoint+0x570>)
 8003690:	4323      	orrs	r3, r4
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ac:	b29c      	uxth	r4, r3
 80036ae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80036b2:	b29c      	uxth	r4, r3
 80036b4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80036b8:	b29c      	uxth	r4, r3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	4b49      	ldr	r3, [pc, #292]	; (80037ec <USB_ActivateEndpoint+0x574>)
 80036c6:	4323      	orrs	r3, r4
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e2:	b29c      	uxth	r4, r3
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <USB_ActivateEndpoint+0x574>)
 80036f0:	4323      	orrs	r3, r4
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
 80036f6:	e0a5      	b.n	8003844 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29c      	uxth	r4, r3
 8003706:	4623      	mov	r3, r4
 8003708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d014      	beq.n	800373a <USB_ActivateEndpoint+0x4c2>
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	b29c      	uxth	r4, r3
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <USB_ActivateEndpoint+0x56c>)
 8003734:	4323      	orrs	r3, r4
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29c      	uxth	r4, r3
 8003748:	4623      	mov	r3, r4
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <USB_ActivateEndpoint+0x504>
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	b29c      	uxth	r4, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <USB_ActivateEndpoint+0x570>)
 8003776:	4323      	orrs	r3, r4
 8003778:	b29b      	uxth	r3, r3
 800377a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	b29c      	uxth	r4, r3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <USB_ActivateEndpoint+0x56c>)
 80037a0:	4323      	orrs	r3, r4
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d020      	beq.n	80037f0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	b29c      	uxth	r4, r3
 80037c6:	f084 0320 	eor.w	r3, r4, #32
 80037ca:	b29c      	uxth	r4, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <USB_ActivateEndpoint+0x574>)
 80037d8:	4323      	orrs	r3, r4
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
 80037de:	e01c      	b.n	800381a <USB_ActivateEndpoint+0x5a2>
 80037e0:	ffff8180 	.word	0xffff8180
 80037e4:	ffffc080 	.word	0xffffc080
 80037e8:	ffff80c0 	.word	0xffff80c0
 80037ec:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003806:	b29c      	uxth	r4, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <USB_ActivateEndpoint+0x5d8>)
 8003814:	4323      	orrs	r3, r4
 8003816:	b29b      	uxth	r3, r3
 8003818:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	b29c      	uxth	r4, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <USB_ActivateEndpoint+0x5d8>)
 800383e:	4323      	orrs	r3, r4
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bc90      	pop	{r4, r7}
 800384e:	4770      	bx	lr
 8003850:	ffff8080 	.word	0xffff8080

08003854 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003854:	b490      	push	{r4, r7}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	7b1b      	ldrb	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d171      	bne.n	800394a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d036      	beq.n	80038dc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29c      	uxth	r4, r3
 800387c:	4623      	mov	r3, r4
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d014      	beq.n	80038b0 <USB_DeactivateEndpoint+0x5c>
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389c:	b29c      	uxth	r4, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	4b6b      	ldr	r3, [pc, #428]	; (8003a58 <USB_DeactivateEndpoint+0x204>)
 80038aa:	4323      	orrs	r3, r4
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c6:	b29c      	uxth	r4, r3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <USB_DeactivateEndpoint+0x208>)
 80038d4:	4323      	orrs	r3, r4
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8013      	strh	r3, [r2, #0]
 80038da:	e144      	b.n	8003b66 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29c      	uxth	r4, r3
 80038ea:	4623      	mov	r3, r4
 80038ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d014      	beq.n	800391e <USB_DeactivateEndpoint+0xca>
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	b29c      	uxth	r4, r3
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <USB_DeactivateEndpoint+0x20c>)
 8003918:	4323      	orrs	r3, r4
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003934:	b29c      	uxth	r4, r3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <USB_DeactivateEndpoint+0x208>)
 8003942:	4323      	orrs	r3, r4
 8003944:	b29b      	uxth	r3, r3
 8003946:	8013      	strh	r3, [r2, #0]
 8003948:	e10d      	b.n	8003b66 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8088 	bne.w	8003a64 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29c      	uxth	r4, r3
 8003962:	4623      	mov	r3, r4
 8003964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <USB_DeactivateEndpoint+0x142>
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	b29c      	uxth	r4, r3
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	441a      	add	r2, r3
 800398e:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <USB_DeactivateEndpoint+0x20c>)
 8003990:	4323      	orrs	r3, r4
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29c      	uxth	r4, r3
 80039a4:	4623      	mov	r3, r4
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <USB_DeactivateEndpoint+0x184>
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	b29c      	uxth	r4, r3
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <USB_DeactivateEndpoint+0x204>)
 80039d2:	4323      	orrs	r3, r4
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	b29c      	uxth	r4, r3
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <USB_DeactivateEndpoint+0x204>)
 80039fc:	4323      	orrs	r3, r4
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	b29c      	uxth	r4, r3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <USB_DeactivateEndpoint+0x208>)
 8003a26:	4323      	orrs	r3, r4
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a42:	b29c      	uxth	r4, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <USB_DeactivateEndpoint+0x208>)
 8003a50:	4323      	orrs	r3, r4
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	8013      	strh	r3, [r2, #0]
 8003a56:	e086      	b.n	8003b66 <USB_DeactivateEndpoint+0x312>
 8003a58:	ffff80c0 	.word	0xffff80c0
 8003a5c:	ffff8080 	.word	0xffff8080
 8003a60:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29c      	uxth	r4, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d014      	beq.n	8003aa6 <USB_DeactivateEndpoint+0x252>
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	b29c      	uxth	r4, r3
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <USB_DeactivateEndpoint+0x320>)
 8003aa0:	4323      	orrs	r3, r4
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29c      	uxth	r4, r3
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <USB_DeactivateEndpoint+0x294>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	b29c      	uxth	r4, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	441a      	add	r2, r3
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <USB_DeactivateEndpoint+0x324>)
 8003ae2:	4323      	orrs	r3, r4
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	b29c      	uxth	r4, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <USB_DeactivateEndpoint+0x320>)
 8003b0c:	4323      	orrs	r3, r4
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b28:	b29c      	uxth	r4, r3
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	441a      	add	r2, r3
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <USB_DeactivateEndpoint+0x328>)
 8003b36:	4323      	orrs	r3, r4
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	b29c      	uxth	r4, r3
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <USB_DeactivateEndpoint+0x328>)
 8003b60:	4323      	orrs	r3, r4
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc90      	pop	{r4, r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	ffffc080 	.word	0xffffc080
 8003b78:	ffff80c0 	.word	0xffff80c0
 8003b7c:	ffff8080 	.word	0xffff8080

08003b80 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08d      	sub	sp, #52	; 0x34
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 8160 	bne.w	8003e54 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d909      	bls.n	8003bb4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e005      	b.n	8003bc0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	7b1b      	ldrb	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d119      	bne.n	8003bfc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6959      	ldr	r1, [r3, #20]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	88da      	ldrh	r2, [r3, #6]
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fba2 	bl	800431e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003bda:	687c      	ldr	r4, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	441c      	add	r4, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4423      	add	r3, r4
 8003bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8023      	strh	r3, [r4, #0]
 8003bfa:	e10f      	b.n	8003e1c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d065      	beq.n	8003cde <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c12:	687c      	ldr	r4, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d148      	bne.n	8003cae <USB_EPStartXfer+0x12e>
 8003c1c:	687c      	ldr	r4, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	441c      	add	r4, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4423      	add	r3, r4
 8003c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c34:	461c      	mov	r4, r3
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10e      	bne.n	8003c5a <USB_EPStartXfer+0xda>
 8003c3c:	8823      	ldrh	r3, [r4, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8023      	strh	r3, [r4, #0]
 8003c48:	8823      	ldrh	r3, [r4, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8023      	strh	r3, [r4, #0]
 8003c58:	e03d      	b.n	8003cd6 <USB_EPStartXfer+0x156>
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8003c5e:	d810      	bhi.n	8003c82 <USB_EPStartXfer+0x102>
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <USB_EPStartXfer+0xf6>
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	3301      	adds	r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8023      	strh	r3, [r4, #0]
 8003c80:	e029      	b.n	8003cd6 <USB_EPStartXfer+0x156>
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <USB_EPStartXfer+0x118>
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	3b01      	subs	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8023      	strh	r3, [r4, #0]
 8003cac:	e013      	b.n	8003cd6 <USB_EPStartXfer+0x156>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10f      	bne.n	8003cd6 <USB_EPStartXfer+0x156>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	441c      	add	r4, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4423      	add	r3, r4
 8003cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	895b      	ldrh	r3, [r3, #10]
 8003cda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003cdc:	e063      	b.n	8003da6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d148      	bne.n	8003d78 <USB_EPStartXfer+0x1f8>
 8003ce6:	687c      	ldr	r4, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	441c      	add	r4, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	4423      	add	r3, r4
 8003cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cfe:	461c      	mov	r4, r3
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <USB_EPStartXfer+0x1a4>
 8003d06:	8823      	ldrh	r3, [r4, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8023      	strh	r3, [r4, #0]
 8003d12:	8823      	ldrh	r3, [r4, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	8023      	strh	r3, [r4, #0]
 8003d22:	e03d      	b.n	8003da0 <USB_EPStartXfer+0x220>
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	2b3e      	cmp	r3, #62	; 0x3e
 8003d28:	d810      	bhi.n	8003d4c <USB_EPStartXfer+0x1cc>
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <USB_EPStartXfer+0x1c0>
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8023      	strh	r3, [r4, #0]
 8003d4a:	e029      	b.n	8003da0 <USB_EPStartXfer+0x220>
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <USB_EPStartXfer+0x1e2>
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8023      	strh	r3, [r4, #0]
 8003d76:	e013      	b.n	8003da0 <USB_EPStartXfer+0x220>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10f      	bne.n	8003da0 <USB_EPStartXfer+0x220>
 8003d80:	687c      	ldr	r4, [r7, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	441c      	add	r4, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	4423      	add	r3, r4
 8003d94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d98:	461c      	mov	r4, r3
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6959      	ldr	r1, [r3, #20]
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fab4 	bl	800431e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <USB_EPStartXfer+0x26a>
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	b29c      	uxth	r4, r3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <USB_EPStartXfer+0x4cc>)
 8003de2:	4323      	orrs	r3, r4
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
 8003de8:	e018      	b.n	8003e1c <USB_EPStartXfer+0x29c>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d114      	bne.n	8003e1c <USB_EPStartXfer+0x29c>
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	b29c      	uxth	r4, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	4b8e      	ldr	r3, [pc, #568]	; (8004050 <USB_EPStartXfer+0x4d0>)
 8003e16:	4323      	orrs	r3, r4
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e32:	b29c      	uxth	r4, r3
 8003e34:	f084 0310 	eor.w	r3, r4, #16
 8003e38:	b29c      	uxth	r4, r3
 8003e3a:	f084 0320 	eor.w	r3, r4, #32
 8003e3e:	b29c      	uxth	r4, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	4b82      	ldr	r3, [pc, #520]	; (8004054 <USB_EPStartXfer+0x4d4>)
 8003e4c:	4323      	orrs	r3, r4
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]
 8003e52:	e146      	b.n	80040e2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d909      	bls.n	8003e74 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	619a      	str	r2, [r3, #24]
 8003e72:	e005      	b.n	8003e80 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b1b      	ldrb	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d148      	bne.n	8003f1a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003e88:	687c      	ldr	r4, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	441c      	add	r4, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	4423      	add	r3, r4
 8003e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea0:	461c      	mov	r4, r3
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <USB_EPStartXfer+0x346>
 8003ea8:	8823      	ldrh	r3, [r4, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	8023      	strh	r3, [r4, #0]
 8003eb4:	8823      	ldrh	r3, [r4, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8023      	strh	r3, [r4, #0]
 8003ec4:	e0f2      	b.n	80040ac <USB_EPStartXfer+0x52c>
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8003eca:	d810      	bhi.n	8003eee <USB_EPStartXfer+0x36e>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <USB_EPStartXfer+0x362>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8023      	strh	r3, [r4, #0]
 8003eec:	e0de      	b.n	80040ac <USB_EPStartXfer+0x52c>
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <USB_EPStartXfer+0x384>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	8023      	strh	r3, [r4, #0]
 8003f18:	e0c8      	b.n	80040ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d148      	bne.n	8003fb4 <USB_EPStartXfer+0x434>
 8003f22:	687c      	ldr	r4, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	441c      	add	r4, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4423      	add	r3, r4
 8003f36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10e      	bne.n	8003f60 <USB_EPStartXfer+0x3e0>
 8003f42:	8823      	ldrh	r3, [r4, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8023      	strh	r3, [r4, #0]
 8003f4e:	8823      	ldrh	r3, [r4, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8023      	strh	r3, [r4, #0]
 8003f5e:	e03d      	b.n	8003fdc <USB_EPStartXfer+0x45c>
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	2b3e      	cmp	r3, #62	; 0x3e
 8003f64:	d810      	bhi.n	8003f88 <USB_EPStartXfer+0x408>
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <USB_EPStartXfer+0x3fc>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8023      	strh	r3, [r4, #0]
 8003f86:	e029      	b.n	8003fdc <USB_EPStartXfer+0x45c>
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <USB_EPStartXfer+0x41e>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8023      	strh	r3, [r4, #0]
 8003fb2:	e013      	b.n	8003fdc <USB_EPStartXfer+0x45c>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10f      	bne.n	8003fdc <USB_EPStartXfer+0x45c>
 8003fbc:	687c      	ldr	r4, [r7, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	441c      	add	r4, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	4423      	add	r3, r4
 8003fd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8023      	strh	r3, [r4, #0]
 8003fdc:	687c      	ldr	r4, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d14e      	bne.n	8004084 <USB_EPStartXfer+0x504>
 8003fe6:	687c      	ldr	r4, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	441c      	add	r4, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	4423      	add	r3, r4
 8003ffa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ffe:	461c      	mov	r4, r3
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10e      	bne.n	8004024 <USB_EPStartXfer+0x4a4>
 8004006:	8823      	ldrh	r3, [r4, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800400e:	b29b      	uxth	r3, r3
 8004010:	8023      	strh	r3, [r4, #0]
 8004012:	8823      	ldrh	r3, [r4, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401e:	b29b      	uxth	r3, r3
 8004020:	8023      	strh	r3, [r4, #0]
 8004022:	e043      	b.n	80040ac <USB_EPStartXfer+0x52c>
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b3e      	cmp	r3, #62	; 0x3e
 8004028:	d816      	bhi.n	8004058 <USB_EPStartXfer+0x4d8>
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <USB_EPStartXfer+0x4c0>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	b29b      	uxth	r3, r3
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	b29b      	uxth	r3, r3
 8004048:	8023      	strh	r3, [r4, #0]
 800404a:	e02f      	b.n	80040ac <USB_EPStartXfer+0x52c>
 800404c:	ffff80c0 	.word	0xffff80c0
 8004050:	ffffc080 	.word	0xffffc080
 8004054:	ffff8080 	.word	0xffff8080
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <USB_EPStartXfer+0x4ee>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3b01      	subs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	b29b      	uxth	r3, r3
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407e:	b29b      	uxth	r3, r3
 8004080:	8023      	strh	r3, [r4, #0]
 8004082:	e013      	b.n	80040ac <USB_EPStartXfer+0x52c>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10f      	bne.n	80040ac <USB_EPStartXfer+0x52c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	441c      	add	r4, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4423      	add	r3, r4
 800409e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	b29c      	uxth	r4, r3
 80040c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80040c8:	b29c      	uxth	r4, r3
 80040ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80040ce:	b29c      	uxth	r4, r3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	4b04      	ldr	r3, [pc, #16]	; (80040ec <USB_EPStartXfer+0x56c>)
 80040dc:	4323      	orrs	r3, r4
 80040de:	b29b      	uxth	r3, r3
 80040e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3734      	adds	r7, #52	; 0x34
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	ffff8080 	.word	0xffff8080

080040f0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040f0:	b490      	push	{r4, r7}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004118:	b29c      	uxth	r4, r3
 800411a:	f084 0310 	eor.w	r3, r4, #16
 800411e:	b29c      	uxth	r4, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <USB_EPSetStall+0x80>)
 800412c:	4323      	orrs	r3, r4
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]
 8004132:	e017      	b.n	8004164 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	b29c      	uxth	r4, r3
 800414c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004150:	b29c      	uxth	r4, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <USB_EPSetStall+0x80>)
 800415e:	4323      	orrs	r3, r4
 8004160:	b29b      	uxth	r3, r3
 8004162:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bc90      	pop	{r4, r7}
 800416e:	4770      	bx	lr
 8004170:	ffff8080 	.word	0xffff8080

08004174 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004174:	b490      	push	{r4, r7}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	7b1b      	ldrb	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d17d      	bne.n	8004282 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03d      	beq.n	800420a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29c      	uxth	r4, r3
 800419c:	4623      	mov	r3, r4
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <USB_EPClearStall+0x5c>
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	b29c      	uxth	r4, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	4b31      	ldr	r3, [pc, #196]	; (8004290 <USB_EPClearStall+0x11c>)
 80041ca:	4323      	orrs	r3, r4
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	78db      	ldrb	r3, [r3, #3]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d054      	beq.n	8004282 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ee:	b29c      	uxth	r4, r3
 80041f0:	f084 0320 	eor.w	r3, r4, #32
 80041f4:	b29c      	uxth	r4, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <USB_EPClearStall+0x120>)
 8004202:	4323      	orrs	r3, r4
 8004204:	b29b      	uxth	r3, r3
 8004206:	8013      	strh	r3, [r2, #0]
 8004208:	e03b      	b.n	8004282 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29c      	uxth	r4, r3
 8004218:	4623      	mov	r3, r4
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d014      	beq.n	800424c <USB_EPClearStall+0xd8>
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	b29c      	uxth	r4, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <USB_EPClearStall+0x124>)
 8004246:	4323      	orrs	r3, r4
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	b29c      	uxth	r4, r3
 8004264:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004268:	b29c      	uxth	r4, r3
 800426a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800426e:	b29c      	uxth	r4, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <USB_EPClearStall+0x120>)
 800427c:	4323      	orrs	r3, r4
 800427e:	b29b      	uxth	r3, r3
 8004280:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bc90      	pop	{r4, r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	ffff80c0 	.word	0xffff80c0
 8004294:	ffff8080 	.word	0xffff8080
 8004298:	ffffc080 	.word	0xffffc080

0800429c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800431e:	b480      	push	{r7}
 8004320:	b08d      	sub	sp, #52	; 0x34
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	4611      	mov	r1, r2
 800432a:	461a      	mov	r2, r3
 800432c:	460b      	mov	r3, r1
 800432e:	80fb      	strh	r3, [r7, #6]
 8004330:	4613      	mov	r3, r2
 8004332:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004334:	88bb      	ldrh	r3, [r7, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	005a      	lsls	r2, r3, #1
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	e01e      	b.n	8004396 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	3301      	adds	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	b29a      	uxth	r2, r3
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	3302      	adds	r3, #2
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	3302      	adds	r3, #2
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	3301      	adds	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	3b01      	subs	r3, #1
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1dd      	bne.n	8004358 <USB_WritePMA+0x3a>
  }
}
 800439c:	bf00      	nop
 800439e:	3734      	adds	r7, #52	; 0x34
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b08b      	sub	sp, #44	; 0x2c
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	4611      	mov	r1, r2
 80043b2:	461a      	mov	r2, r3
 80043b4:	460b      	mov	r3, r1
 80043b6:	80fb      	strh	r3, [r7, #6]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80043bc:	88bb      	ldrh	r3, [r7, #4]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	e01b      	b.n	8004418 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	3302      	adds	r3, #2
 80043ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b2da      	uxtb	r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3301      	adds	r3, #1
 800440a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	3302      	adds	r3, #2
 8004410:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	3b01      	subs	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e0      	bne.n	80043e0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	701a      	strb	r2, [r3, #0]
  }
}
 800443a:	bf00      	nop
 800443c:	372c      	adds	r7, #44	; 0x2c
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004456:	2b84      	cmp	r3, #132	; 0x84
 8004458:	d005      	beq.n	8004466 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800445a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	3303      	adds	r3, #3
 8004464:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004476:	f000 fe43 	bl	8005100 <vTaskStartScheduler>
  
  return osOK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}

08004480 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af04      	add	r7, sp, #16
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <osThreadCreate+0x54>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01c      	beq.n	80044d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685c      	ldr	r4, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691e      	ldr	r6, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ffc9 	bl	8004444 <makeFreeRtosPriority>
 80044b2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044bc:	9202      	str	r2, [sp, #8]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	9100      	str	r1, [sp, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	4632      	mov	r2, r6
 80044c6:	4629      	mov	r1, r5
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 fc5f 	bl	8004d8c <xTaskCreateStatic>
 80044ce:	4603      	mov	r3, r0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e01c      	b.n	800450e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685c      	ldr	r4, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044e0:	b29e      	uxth	r6, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ffab 	bl	8004444 <makeFreeRtosPriority>
 80044ee:	4602      	mov	r2, r0
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4632      	mov	r2, r6
 80044fc:	4629      	mov	r1, r5
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 fc9d 	bl	8004e3e <xTaskCreate>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d001      	beq.n	800450e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004518 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <osDelay+0x16>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	e000      	b.n	8004530 <osDelay+0x18>
 800452e:	2301      	movs	r3, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fdb1 	bl	8005098 <vTaskDelay>
  
  return osOK;
 8004536:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800454c:	f000 fe36 	bl	80051bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004550:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <pvPortMalloc+0x170>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004558:	f000 f90c 	bl	8004774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800455c:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <pvPortMalloc+0x174>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 808c 	bne.w	8004682 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004570:	2208      	movs	r2, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f023 0307 	bic.w	r3, r3, #7
 8004588:	3308      	adds	r3, #8
 800458a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e7fe      	b.n	80045a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d068      	beq.n	8004682 <pvPortMalloc+0x142>
 80045b0:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <pvPortMalloc+0x178>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d863      	bhi.n	8004682 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045ba:	4b40      	ldr	r3, [pc, #256]	; (80046bc <pvPortMalloc+0x17c>)
 80045bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <pvPortMalloc+0x17c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c4:	e004      	b.n	80045d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d903      	bls.n	80045e2 <pvPortMalloc+0xa2>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f1      	bne.n	80045c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <pvPortMalloc+0x170>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d04a      	beq.n	8004682 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4413      	add	r3, r2
 80045f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1ad2      	subs	r2, r2, r3
 8004606:	2308      	movs	r3, #8
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	429a      	cmp	r2, r3
 800460c:	d91e      	bls.n	800464c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <pvPortMalloc+0xf4>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e7fe      	b.n	8004632 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004646:	69b8      	ldr	r0, [r7, #24]
 8004648:	f000 f8f6 	bl	8004838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <pvPortMalloc+0x178>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <pvPortMalloc+0x178>)
 8004658:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <pvPortMalloc+0x178>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <pvPortMalloc+0x180>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d203      	bcs.n	800466e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <pvPortMalloc+0x178>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <pvPortMalloc+0x180>)
 800466c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <pvPortMalloc+0x174>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	431a      	orrs	r2, r3
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004682:	f000 fda9 	bl	80051d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <pvPortMalloc+0x164>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e7fe      	b.n	80046a2 <pvPortMalloc+0x162>
	return pvReturn;
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20001218 	.word	0x20001218
 80046b4:	20001224 	.word	0x20001224
 80046b8:	2000121c 	.word	0x2000121c
 80046bc:	20001210 	.word	0x20001210
 80046c0:	20001220 	.word	0x20001220

080046c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d046      	beq.n	8004764 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046d6:	2308      	movs	r3, #8
 80046d8:	425b      	negs	r3, r3
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <vPortFree+0xa8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <vPortFree+0x42>
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e7fe      	b.n	8004704 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <vPortFree+0x5e>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	e7fe      	b.n	8004720 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <vPortFree+0xa8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d019      	beq.n	8004764 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d115      	bne.n	8004764 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <vPortFree+0xa8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004748:	f000 fd38 	bl	80051bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <vPortFree+0xac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a06      	ldr	r2, [pc, #24]	; (8004770 <vPortFree+0xac>)
 8004758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f000 f86c 	bl	8004838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004760:	f000 fd3a 	bl	80051d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004764:	bf00      	nop
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20001224 	.word	0x20001224
 8004770:	2000121c 	.word	0x2000121c

08004774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800477a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800477e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <prvHeapInit+0xac>)
 8004782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3307      	adds	r3, #7
 8004792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <prvHeapInit+0xac>)
 80047a4:	4413      	add	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <prvHeapInit+0xb0>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <prvHeapInit+0xb0>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4413      	add	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047c0:	2208      	movs	r2, #8
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <prvHeapInit+0xb4>)
 80047d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <prvHeapInit+0xb4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <prvHeapInit+0xb4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	1ad2      	subs	r2, r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <prvHeapInit+0xb4>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <prvHeapInit+0xb8>)
 8004802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a09      	ldr	r2, [pc, #36]	; (8004830 <prvHeapInit+0xbc>)
 800480a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <prvHeapInit+0xc0>)
 800480e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000610 	.word	0x20000610
 8004824:	20001210 	.word	0x20001210
 8004828:	20001218 	.word	0x20001218
 800482c:	20001220 	.word	0x20001220
 8004830:	2000121c 	.word	0x2000121c
 8004834:	20001224 	.word	0x20001224

08004838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <prvInsertBlockIntoFreeList+0xa8>)
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e002      	b.n	800484c <prvInsertBlockIntoFreeList+0x14>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d8f7      	bhi.n	8004846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d108      	bne.n	800487a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	441a      	add	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d118      	bne.n	80048c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <prvInsertBlockIntoFreeList+0xac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d00d      	beq.n	80048b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e008      	b.n	80048c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <prvInsertBlockIntoFreeList+0xac>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e003      	b.n	80048c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d002      	beq.n	80048d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	20001210 	.word	0x20001210
 80048e4:	20001218 	.word	0x20001218

080048e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f103 0208 	add.w	r2, r3, #8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f103 0208 	add.w	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f103 0208 	add.w	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d103      	bne.n	80049a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e00c      	b.n	80049be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3308      	adds	r3, #8
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e002      	b.n	80049b2 <vListInsert+0x2e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d2f6      	bcs.n	80049ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6892      	ldr	r2, [r2, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6852      	ldr	r2, [r2, #4]
 8004a14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d103      	bne.n	8004a28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1e5a      	subs	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
	...

08004a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b04      	subs	r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3b04      	subs	r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <pxPortInitialiseStack+0x54>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3b14      	subs	r3, #20
 8004a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b20      	subs	r3, #32
 8004a8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	08004aa1 	.word	0x08004aa1

08004aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <prvTaskExitError+0x4c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d009      	beq.n	8004ac8 <prvTaskExitError+0x28>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	e7fe      	b.n	8004ac6 <prvTaskExitError+0x26>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ada:	bf00      	nop
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0fc      	beq.n	8004adc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	2000006c 	.word	0x2000006c

08004af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <pxCurrentTCBConst2>)
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	6808      	ldr	r0, [r1, #0]
 8004af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004afa:	f380 8809 	msr	PSP, r0
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8811 	msr	BASEPRI, r0
 8004b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b0e:	4770      	bx	lr

08004b10 <pxCurrentTCBConst2>:
 8004b10:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <prvPortStartFirstTask+0x1c>)
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	6800      	ldr	r0, [r0, #0]
 8004b1e:	f380 8808 	msr	MSP, r0
 8004b22:	b662      	cpsie	i
 8004b24:	b661      	cpsie	f
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	df00      	svc	0
 8004b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b32:	bf00      	nop
 8004b34:	e000ed08 	.word	0xe000ed08

08004b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0xcc>)
 8004b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	22ff      	movs	r2, #255	; 0xff
 8004b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <xPortStartScheduler+0xd0>)
 8004b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b6c:	e009      	b.n	8004b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d0ef      	beq.n	8004b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1c3 0307 	rsb	r3, r3, #7
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d009      	beq.n	8004bae <xPortStartScheduler+0x76>
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	e7fe      	b.n	8004bac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004bb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <xPortStartScheduler+0xd4>)
 8004bc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0xd8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0xd8>)
 8004bd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <xPortStartScheduler+0xd8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <xPortStartScheduler+0xd8>)
 8004bde:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004be2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004be4:	f000 f8b0 	bl	8004d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <xPortStartScheduler+0xdc>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bee:	f7ff ff93 	bl	8004b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bf2:	f000 fc49 	bl	8005488 <vTaskSwitchContext>
	prvTaskExitError();
 8004bf6:	f7ff ff53 	bl	8004aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	e000e400 	.word	0xe000e400
 8004c08:	20001228 	.word	0x20001228
 8004c0c:	2000122c 	.word	0x2000122c
 8004c10:	e000ed20 	.word	0xe000ed20
 8004c14:	2000006c 	.word	0x2000006c

08004c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <vPortEnterCritical+0x54>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x54>)
 8004c38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x54>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d10e      	bne.n	8004c60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x58>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <vPortEnterCritical+0x48>
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x46>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000006c 	.word	0x2000006c
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <vPortExitCritical+0x48>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <vPortExitCritical+0x22>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	e7fe      	b.n	8004c94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <vPortExitCritical+0x48>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <vPortExitCritical+0x48>)
 8004c9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <vPortExitCritical+0x48>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <vPortExitCritical+0x3e>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	2000006c 	.word	0x2000006c

08004cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cc0:	f3ef 8009 	mrs	r0, PSP
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <pxCurrentTCBConst>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cd0:	6010      	str	r0, [r2, #0]
 8004cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004cd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cda:	f380 8811 	msr	BASEPRI, r0
 8004cde:	f000 fbd3 	bl	8005488 <vTaskSwitchContext>
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8811 	msr	BASEPRI, r0
 8004cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	6808      	ldr	r0, [r1, #0]
 8004cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cf6:	f380 8809 	msr	PSP, r0
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	4770      	bx	lr

08004d00 <pxCurrentTCBConst>:
 8004d00:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d20:	f000 faf6 	bl	8005310 <xTaskIncrementTick>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <SysTick_Handler+0x3c>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <vPortSetupTimerInterrupt+0x30>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <vPortSetupTimerInterrupt+0x34>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <vPortSetupTimerInterrupt+0x38>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <vPortSetupTimerInterrupt+0x40>)
 8004d66:	3b01      	subs	r3, #1
 8004d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6a:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <vPortSetupTimerInterrupt+0x30>)
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	601a      	str	r2, [r3, #0]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	e000e010 	.word	0xe000e010
 8004d7c:	e000e018 	.word	0xe000e018
 8004d80:	20000060 	.word	0x20000060
 8004d84:	10624dd3 	.word	0x10624dd3
 8004d88:	e000e014 	.word	0xe000e014

08004d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	; 0x38
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <xTaskCreateStatic+0x28>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	e7fe      	b.n	8004db2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <xTaskCreateStatic+0x42>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e7fe      	b.n	8004dcc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dce:	2354      	movs	r3, #84	; 0x54
 8004dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b54      	cmp	r3, #84	; 0x54
 8004dd6:	d009      	beq.n	8004dec <xTaskCreateStatic+0x60>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e7fe      	b.n	8004dea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01e      	beq.n	8004e30 <xTaskCreateStatic+0xa4>
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9303      	str	r3, [sp, #12]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	9302      	str	r3, [sp, #8]
 8004e12:	f107 0314 	add.w	r3, r7, #20
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f850 	bl	8004ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2a:	f000 f8cb 	bl	8004fc4 <prvAddNewTaskToReadyList>
 8004e2e:	e001      	b.n	8004e34 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e34:	697b      	ldr	r3, [r7, #20]
	}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08c      	sub	sp, #48	; 0x30
 8004e42:	af04      	add	r7, sp, #16
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fb74 	bl	8004540 <pvPortMalloc>
 8004e58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e60:	2054      	movs	r0, #84	; 0x54
 8004e62:	f7ff fb6d 	bl	8004540 <pvPortMalloc>
 8004e66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
 8004e74:	e005      	b.n	8004e82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff fc24 	bl	80046c4 <vPortFree>
 8004e7c:	e001      	b.n	8004e82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	9302      	str	r3, [sp, #8]
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f80e 	bl	8004ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eac:	69f8      	ldr	r0, [r7, #28]
 8004eae:	f000 f889 	bl	8004fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e002      	b.n	8004ebe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <prvInitialiseNewTask+0x46>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e7fe      	b.n	8004f0c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e012      	b.n	8004f3a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	3334      	adds	r3, #52	; 0x34
 8004f24:	460a      	mov	r2, r1
 8004f26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d9e9      	bls.n	8004f14 <prvInitialiseNewTask+0x4c>
 8004f40:	e000      	b.n	8004f44 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004f42:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d901      	bls.n	8004f56 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f52:	2306      	movs	r3, #6
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	2200      	movs	r2, #0
 8004f66:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fcda 	bl	8004926 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	3318      	adds	r3, #24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fcd5 	bl	8004926 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	f1c3 0207 	rsb	r2, r3, #7
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	69b8      	ldr	r0, [r7, #24]
 8004fa6:	f7ff fd4f 	bl	8004a48 <pxPortInitialiseStack>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fbc:	bf00      	nop
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fcc:	f7ff fe24 	bl	8004c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fd0:	4b2a      	ldr	r3, [pc, #168]	; (800507c <prvAddNewTaskToReadyList+0xb8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <prvAddNewTaskToReadyList+0xb8>)
 8004fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fda:	4b29      	ldr	r3, [pc, #164]	; (8005080 <prvAddNewTaskToReadyList+0xbc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fe2:	4a27      	ldr	r2, [pc, #156]	; (8005080 <prvAddNewTaskToReadyList+0xbc>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <prvAddNewTaskToReadyList+0xb8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d110      	bne.n	8005012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ff0:	f000 fabc 	bl	800556c <prvInitialiseTaskLists>
 8004ff4:	e00d      	b.n	8005012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <prvAddNewTaskToReadyList+0xc0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <prvAddNewTaskToReadyList+0xbc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	429a      	cmp	r2, r3
 800500a:	d802      	bhi.n	8005012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800500c:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <prvAddNewTaskToReadyList+0xbc>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <prvAddNewTaskToReadyList+0xc4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <prvAddNewTaskToReadyList+0xc4>)
 800501a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	2201      	movs	r2, #1
 8005022:	409a      	lsls	r2, r3
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <prvAddNewTaskToReadyList+0xc8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <prvAddNewTaskToReadyList+0xc8>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <prvAddNewTaskToReadyList+0xcc>)
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7ff fc7a 	bl	800493e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800504a:	f7ff fe13 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <prvAddNewTaskToReadyList+0xc0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <prvAddNewTaskToReadyList+0xbc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <prvAddNewTaskToReadyList+0xd0>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20001330 	.word	0x20001330
 8005080:	20001230 	.word	0x20001230
 8005084:	2000133c 	.word	0x2000133c
 8005088:	2000134c 	.word	0x2000134c
 800508c:	20001338 	.word	0x20001338
 8005090:	20001234 	.word	0x20001234
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <vTaskDelay+0x60>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <vTaskDelay+0x2e>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	e7fe      	b.n	80050c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80050c6:	f000 f879 	bl	80051bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ca:	2100      	movs	r1, #0
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb0b 	bl	80056e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050d2:	f000 f881 	bl	80051d8 <xTaskResumeAll>
 80050d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80050de:	4b07      	ldr	r3, [pc, #28]	; (80050fc <vTaskDelay+0x64>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20001358 	.word	0x20001358
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800510e:	463a      	mov	r2, r7
 8005110:	1d39      	adds	r1, r7, #4
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb f840 	bl	800019c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	9202      	str	r2, [sp, #8]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	460a      	mov	r2, r1
 800512e:	491d      	ldr	r1, [pc, #116]	; (80051a4 <vTaskStartScheduler+0xa4>)
 8005130:	481d      	ldr	r0, [pc, #116]	; (80051a8 <vTaskStartScheduler+0xa8>)
 8005132:	f7ff fe2b 	bl	8004d8c <xTaskCreateStatic>
 8005136:	4602      	mov	r2, r0
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <vTaskStartScheduler+0xac>)
 800513a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <vTaskStartScheduler+0xac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005144:	2301      	movs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e001      	b.n	800514e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d115      	bne.n	8005180 <vTaskStartScheduler+0x80>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <vTaskStartScheduler+0xb0>)
 8005168:	f04f 32ff 	mov.w	r2, #4294967295
 800516c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <vTaskStartScheduler+0xb4>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005174:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <vTaskStartScheduler+0xb8>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800517a:	f7ff fcdd 	bl	8004b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800517e:	e00d      	b.n	800519c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d109      	bne.n	800519c <vTaskStartScheduler+0x9c>
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e7fe      	b.n	800519a <vTaskStartScheduler+0x9a>
}
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08006ef8 	.word	0x08006ef8
 80051a8:	0800553d 	.word	0x0800553d
 80051ac:	20001354 	.word	0x20001354
 80051b0:	20001350 	.word	0x20001350
 80051b4:	2000133c 	.word	0x2000133c
 80051b8:	20001334 	.word	0x20001334

080051bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <vTaskSuspendAll+0x18>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	4a03      	ldr	r2, [pc, #12]	; (80051d4 <vTaskSuspendAll+0x18>)
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20001358 	.word	0x20001358

080051d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <xTaskResumeAll+0x114>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <xTaskResumeAll+0x2a>
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	e7fe      	b.n	8005200 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005202:	f7ff fd09 	bl	8004c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <xTaskResumeAll+0x114>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a37      	ldr	r2, [pc, #220]	; (80052ec <xTaskResumeAll+0x114>)
 800520e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <xTaskResumeAll+0x114>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d161      	bne.n	80052dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <xTaskResumeAll+0x118>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d05d      	beq.n	80052dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005220:	e02e      	b.n	8005280 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005222:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <xTaskResumeAll+0x11c>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3318      	adds	r3, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fbe0 	bl	80049f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fbdb 	bl	80049f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <xTaskResumeAll+0x120>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <xTaskResumeAll+0x120>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <xTaskResumeAll+0x124>)
 800525e:	441a      	add	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7ff fb69 	bl	800493e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <xTaskResumeAll+0x128>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <xTaskResumeAll+0x12c>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <xTaskResumeAll+0x11c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1cc      	bne.n	8005222 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800528e:	f000 fa07 	bl	80056a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005292:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <xTaskResumeAll+0x130>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800529e:	f000 f837 	bl	8005310 <xTaskIncrementTick>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <xTaskResumeAll+0x12c>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f1      	bne.n	800529e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <xTaskResumeAll+0x130>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <xTaskResumeAll+0x12c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <xTaskResumeAll+0x134>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052dc:	f7ff fcca 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 80052e0:	68bb      	ldr	r3, [r7, #8]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20001358 	.word	0x20001358
 80052f0:	20001330 	.word	0x20001330
 80052f4:	200012f0 	.word	0x200012f0
 80052f8:	20001338 	.word	0x20001338
 80052fc:	20001234 	.word	0x20001234
 8005300:	20001230 	.word	0x20001230
 8005304:	20001344 	.word	0x20001344
 8005308:	20001340 	.word	0x20001340
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531a:	4b50      	ldr	r3, [pc, #320]	; (800545c <xTaskIncrementTick+0x14c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 808c 	bne.w	800543c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005324:	4b4e      	ldr	r3, [pc, #312]	; (8005460 <xTaskIncrementTick+0x150>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800532c:	4a4c      	ldr	r2, [pc, #304]	; (8005460 <xTaskIncrementTick+0x150>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11f      	bne.n	8005378 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005338:	4b4a      	ldr	r3, [pc, #296]	; (8005464 <xTaskIncrementTick+0x154>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <xTaskIncrementTick+0x46>
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	e7fe      	b.n	8005354 <xTaskIncrementTick+0x44>
 8005356:	4b43      	ldr	r3, [pc, #268]	; (8005464 <xTaskIncrementTick+0x154>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	4b42      	ldr	r3, [pc, #264]	; (8005468 <xTaskIncrementTick+0x158>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a40      	ldr	r2, [pc, #256]	; (8005464 <xTaskIncrementTick+0x154>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4a40      	ldr	r2, [pc, #256]	; (8005468 <xTaskIncrementTick+0x158>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b40      	ldr	r3, [pc, #256]	; (800546c <xTaskIncrementTick+0x15c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a3e      	ldr	r2, [pc, #248]	; (800546c <xTaskIncrementTick+0x15c>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	f000 f994 	bl	80056a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005378:	4b3d      	ldr	r3, [pc, #244]	; (8005470 <xTaskIncrementTick+0x160>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	d34d      	bcc.n	800541e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005382:	4b38      	ldr	r3, [pc, #224]	; (8005464 <xTaskIncrementTick+0x154>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <xTaskIncrementTick+0x80>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <xTaskIncrementTick+0x82>
 8005390:	2300      	movs	r3, #0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <xTaskIncrementTick+0x160>)
 8005398:	f04f 32ff 	mov.w	r2, #4294967295
 800539c:	601a      	str	r2, [r3, #0]
					break;
 800539e:	e03e      	b.n	800541e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053a0:	4b30      	ldr	r3, [pc, #192]	; (8005464 <xTaskIncrementTick+0x154>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d203      	bcs.n	80053c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053b8:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <xTaskIncrementTick+0x160>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
						break;
 80053be:	e02e      	b.n	800541e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fb15 	bl	80049f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3318      	adds	r3, #24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fb0c 	bl	80049f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	2201      	movs	r2, #1
 80053e2:	409a      	lsls	r2, r3
 80053e4:	4b23      	ldr	r3, [pc, #140]	; (8005474 <xTaskIncrementTick+0x164>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	4a22      	ldr	r2, [pc, #136]	; (8005474 <xTaskIncrementTick+0x164>)
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <xTaskIncrementTick+0x168>)
 80053fc:	441a      	add	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3304      	adds	r3, #4
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f7ff fa9a 	bl	800493e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <xTaskIncrementTick+0x16c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	429a      	cmp	r2, r3
 8005416:	d3b4      	bcc.n	8005382 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541c:	e7b1      	b.n	8005382 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <xTaskIncrementTick+0x16c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4914      	ldr	r1, [pc, #80]	; (8005478 <xTaskIncrementTick+0x168>)
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d907      	bls.n	8005446 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005436:	2301      	movs	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e004      	b.n	8005446 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <xTaskIncrementTick+0x170>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <xTaskIncrementTick+0x170>)
 8005444:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <xTaskIncrementTick+0x174>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800544e:	2301      	movs	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005452:	697b      	ldr	r3, [r7, #20]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20001358 	.word	0x20001358
 8005460:	20001334 	.word	0x20001334
 8005464:	200012e8 	.word	0x200012e8
 8005468:	200012ec 	.word	0x200012ec
 800546c:	20001348 	.word	0x20001348
 8005470:	20001350 	.word	0x20001350
 8005474:	20001338 	.word	0x20001338
 8005478:	20001234 	.word	0x20001234
 800547c:	20001230 	.word	0x20001230
 8005480:	20001340 	.word	0x20001340
 8005484:	20001344 	.word	0x20001344

08005488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <vTaskSwitchContext+0xa0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005496:	4b25      	ldr	r3, [pc, #148]	; (800552c <vTaskSwitchContext+0xa4>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800549c:	e03e      	b.n	800551c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <vTaskSwitchContext+0xa4>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054a4:	4b22      	ldr	r3, [pc, #136]	; (8005530 <vTaskSwitchContext+0xa8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054b2:	7afb      	ldrb	r3, [r7, #11]
 80054b4:	f1c3 031f 	rsb	r3, r3, #31
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	491e      	ldr	r1, [pc, #120]	; (8005534 <vTaskSwitchContext+0xac>)
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	e7fe      	b.n	80054e0 <vTaskSwitchContext+0x58>
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4a11      	ldr	r2, [pc, #68]	; (8005534 <vTaskSwitchContext+0xac>)
 80054ee:	4413      	add	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3308      	adds	r3, #8
 8005504:	429a      	cmp	r2, r3
 8005506:	d104      	bne.n	8005512 <vTaskSwitchContext+0x8a>
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a07      	ldr	r2, [pc, #28]	; (8005538 <vTaskSwitchContext+0xb0>)
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20001358 	.word	0x20001358
 800552c:	20001344 	.word	0x20001344
 8005530:	20001338 	.word	0x20001338
 8005534:	20001234 	.word	0x20001234
 8005538:	20001230 	.word	0x20001230

0800553c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005544:	f000 f852 	bl	80055ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <prvIdleTask+0x28>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d9f9      	bls.n	8005544 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <prvIdleTask+0x2c>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005560:	e7f0      	b.n	8005544 <prvIdleTask+0x8>
 8005562:	bf00      	nop
 8005564:	20001234 	.word	0x20001234
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	e00c      	b.n	8005592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4a12      	ldr	r2, [pc, #72]	; (80055cc <prvInitialiseTaskLists+0x60>)
 8005584:	4413      	add	r3, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f9ae 	bl	80048e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3301      	adds	r3, #1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b06      	cmp	r3, #6
 8005596:	d9ef      	bls.n	8005578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005598:	480d      	ldr	r0, [pc, #52]	; (80055d0 <prvInitialiseTaskLists+0x64>)
 800559a:	f7ff f9a5 	bl	80048e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800559e:	480d      	ldr	r0, [pc, #52]	; (80055d4 <prvInitialiseTaskLists+0x68>)
 80055a0:	f7ff f9a2 	bl	80048e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055a4:	480c      	ldr	r0, [pc, #48]	; (80055d8 <prvInitialiseTaskLists+0x6c>)
 80055a6:	f7ff f99f 	bl	80048e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055aa:	480c      	ldr	r0, [pc, #48]	; (80055dc <prvInitialiseTaskLists+0x70>)
 80055ac:	f7ff f99c 	bl	80048e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055b0:	480b      	ldr	r0, [pc, #44]	; (80055e0 <prvInitialiseTaskLists+0x74>)
 80055b2:	f7ff f999 	bl	80048e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <prvInitialiseTaskLists+0x78>)
 80055b8:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <prvInitialiseTaskLists+0x64>)
 80055ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <prvInitialiseTaskLists+0x7c>)
 80055be:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <prvInitialiseTaskLists+0x68>)
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20001234 	.word	0x20001234
 80055d0:	200012c0 	.word	0x200012c0
 80055d4:	200012d4 	.word	0x200012d4
 80055d8:	200012f0 	.word	0x200012f0
 80055dc:	20001304 	.word	0x20001304
 80055e0:	2000131c 	.word	0x2000131c
 80055e4:	200012e8 	.word	0x200012e8
 80055e8:	200012ec 	.word	0x200012ec

080055ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f2:	e019      	b.n	8005628 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055f4:	f7ff fb10 	bl	8004c18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <prvCheckTasksWaitingTermination+0x4c>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f9f5 	bl	80049f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <prvCheckTasksWaitingTermination+0x50>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <prvCheckTasksWaitingTermination+0x50>)
 8005612:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <prvCheckTasksWaitingTermination+0x54>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	4a09      	ldr	r2, [pc, #36]	; (8005640 <prvCheckTasksWaitingTermination+0x54>)
 800561c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800561e:	f7ff fb29 	bl	8004c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f80e 	bl	8005644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <prvCheckTasksWaitingTermination+0x54>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e1      	bne.n	80055f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20001304 	.word	0x20001304
 800563c:	20001330 	.word	0x20001330
 8005640:	20001318 	.word	0x20001318

08005644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff f832 	bl	80046c4 <vPortFree>
				vPortFree( pxTCB );
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff f82f 	bl	80046c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005666:	e017      	b.n	8005698 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566e:	2b01      	cmp	r3, #1
 8005670:	d103      	bne.n	800567a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff f826 	bl	80046c4 <vPortFree>
	}
 8005678:	e00e      	b.n	8005698 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005680:	2b02      	cmp	r3, #2
 8005682:	d009      	beq.n	8005698 <prvDeleteTCB+0x54>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e7fe      	b.n	8005696 <prvDeleteTCB+0x52>
	}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <prvResetNextTaskUnblockTime+0x40>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <prvResetNextTaskUnblockTime+0x14>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <prvResetNextTaskUnblockTime+0x16>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <prvResetNextTaskUnblockTime+0x44>)
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056c2:	e008      	b.n	80056d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <prvResetNextTaskUnblockTime+0x40>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <prvResetNextTaskUnblockTime+0x44>)
 80056d4:	6013      	str	r3, [r2, #0]
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr
 80056e0:	200012e8 	.word	0x200012e8
 80056e4:	20001350 	.word	0x20001350

080056e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f8:	4b28      	ldr	r3, [pc, #160]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f978 	bl	80049f4 <uxListRemove>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43da      	mvns	r2, r3
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d10a      	bne.n	8005740 <prvAddCurrentTaskToDelayedList+0x58>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	481a      	ldr	r0, [pc, #104]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800573a:	f7ff f900 	bl	800493e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800573e:	e026      	b.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d209      	bcs.n	800576c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7ff f90d 	bl	8004984 <vListInsert>
}
 800576a:	e010      	b.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7ff f903 	bl	8004984 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d202      	bcs.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6013      	str	r3, [r2, #0]
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20001334 	.word	0x20001334
 800579c:	20001230 	.word	0x20001230
 80057a0:	20001338 	.word	0x20001338
 80057a4:	2000131c 	.word	0x2000131c
 80057a8:	200012ec 	.word	0x200012ec
 80057ac:	200012e8 	.word	0x200012e8
 80057b0:	20001350 	.word	0x20001350

080057b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7c1b      	ldrb	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d115      	bne.n	80057f8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d0:	2202      	movs	r2, #2
 80057d2:	2181      	movs	r1, #129	; 0x81
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fb f980 	bl	8000ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e4:	2202      	movs	r2, #2
 80057e6:	2101      	movs	r1, #1
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fb f976 	bl	8000ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80057f6:	e012      	b.n	800581e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	2202      	movs	r2, #2
 80057fc:	2181      	movs	r1, #129	; 0x81
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fb f96b 	bl	8000ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	2202      	movs	r2, #2
 800580e:	2101      	movs	r1, #1
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fb f962 	bl	8000ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800581e:	2308      	movs	r3, #8
 8005820:	2203      	movs	r2, #3
 8005822:	2182      	movs	r1, #130	; 0x82
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fb f958 	bl	8000ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005830:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005834:	f7fb fa72 	bl	8000d1c <USBD_static_malloc>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
 800584e:	e026      	b.n	800589e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005856:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	7c1b      	ldrb	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005884:	2101      	movs	r1, #1
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fa11 	bl	8000cae <USBD_LL_PrepareReceive>
 800588c:	e007      	b.n	800589e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	2101      	movs	r1, #1
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fb fa08 	bl	8000cae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058b8:	2181      	movs	r1, #129	; 0x81
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fb f933 	bl	8000b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058c6:	2101      	movs	r1, #1
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fb f92c 	bl	8000b26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058d6:	2182      	movs	r1, #130	; 0x82
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fb f924 	bl	8000b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fb fa18 	bl	8000d34 <USBD_static_free>
    pdev->pClassData = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005926:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800593c:	2b00      	cmp	r3, #0
 800593e:	d039      	beq.n	80059b4 <USBD_CDC_Setup+0x9e>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d17c      	bne.n	8005a3e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d029      	beq.n	80059a0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b25b      	sxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	da11      	bge.n	800597a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005962:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	88d2      	ldrh	r2, [r2, #6]
 8005968:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800596a:	6939      	ldr	r1, [r7, #16]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	461a      	mov	r2, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f9c6 	bl	8006d04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005978:	e068      	b.n	8005a4c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	785a      	ldrb	r2, [r3, #1]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	88db      	ldrh	r3, [r3, #6]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005990:	6939      	ldr	r1, [r7, #16]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f9e1 	bl	8006d60 <USBD_CtlPrepareRx>
      break;
 800599e:	e055      	b.n	8005a4c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	7850      	ldrb	r0, [r2, #1]
 80059ac:	2200      	movs	r2, #0
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	4798      	blx	r3
      break;
 80059b2:	e04b      	b.n	8005a4c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b0a      	cmp	r3, #10
 80059ba:	d017      	beq.n	80059ec <USBD_CDC_Setup+0xd6>
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d029      	beq.n	8005a14 <USBD_CDC_Setup+0xfe>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d133      	bne.n	8005a2c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d107      	bne.n	80059de <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	2202      	movs	r2, #2
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 f994 	bl	8006d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059dc:	e02e      	b.n	8005a3c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f925 	bl	8006c30 <USBD_CtlError>
            ret = USBD_FAIL;
 80059e6:	2302      	movs	r3, #2
 80059e8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ea:	e027      	b.n	8005a3c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d107      	bne.n	8005a06 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80059f6:	f107 030f 	add.w	r3, r7, #15
 80059fa:	2201      	movs	r2, #1
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 f980 	bl	8006d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a04:	e01a      	b.n	8005a3c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f911 	bl	8006c30 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	75fb      	strb	r3, [r7, #23]
          break;
 8005a12:	e013      	b.n	8005a3c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d00d      	beq.n	8005a3a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f905 	bl	8006c30 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a26:	2302      	movs	r3, #2
 8005a28:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a2a:	e006      	b.n	8005a3a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 f8fe 	bl	8006c30 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a34:	2302      	movs	r3, #2
 8005a36:	75fb      	strb	r3, [r7, #23]
          break;
 8005a38:	e000      	b.n	8005a3c <USBD_CDC_Setup+0x126>
          break;
 8005a3a:	bf00      	nop
      }
      break;
 8005a3c:	e006      	b.n	8005a4c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 f8f5 	bl	8006c30 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a46:	2302      	movs	r3, #2
 8005a48:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4a:	bf00      	nop
  }

  return ret;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a68:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a70:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d037      	beq.n	8005aec <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	331c      	adds	r3, #28
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d026      	beq.n	8005ae0 <USBD_CDC_DataIn+0x8a>
 8005a92:	78fa      	ldrb	r2, [r7, #3]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	331c      	adds	r3, #28
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	0152      	lsls	r2, r2, #5
 8005aaa:	440a      	add	r2, r1
 8005aac:	3238      	adds	r2, #56	; 0x38
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab4:	fb02 f201 	mul.w	r2, r2, r1
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	331c      	adds	r3, #28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ad2:	78f9      	ldrb	r1, [r7, #3]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fb f8c5 	bl	8000c68 <USBD_LL_Transmit>
 8005ade:	e003      	b.n	8005ae8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb f8f0 	bl	8000cf4 <USBD_LL_GetRxDataSize>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4798      	blx	r3

    return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d015      	beq.n	8005b92 <USBD_CDC_EP0_RxReady+0x46>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b6c:	2bff      	cmp	r3, #255	; 0xff
 8005b6e:	d010      	beq.n	8005b92 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b7e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b86:	b292      	uxth	r2, r2
 8005b88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2243      	movs	r2, #67	; 0x43
 8005ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005baa:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	200000f8 	.word	0x200000f8

08005bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2243      	movs	r2, #67	; 0x43
 8005bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	200000b4 	.word	0x200000b4

08005bdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2243      	movs	r2, #67	; 0x43
 8005be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005bea:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000013c 	.word	0x2000013c

08005bfc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	220a      	movs	r2, #10
 8005c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c0a:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000070 	.word	0x20000070

08005c1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c26:	2302      	movs	r3, #2
 8005c28:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr

08005c7a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d017      	beq.n	8005cea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7c1b      	ldrb	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fa ffed 	bl	8000cae <USBD_LL_PrepareReceive>
 8005cd4:	e007      	b.n	8005ce6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	2101      	movs	r1, #1
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fa ffe4 	bl	8000cae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e000      	b.n	8005cec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e01a      	b.n	8005d42 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	79fa      	ldrb	r2, [r7, #7]
 8005d38:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7fa fe58 	bl	80009f0 <USBD_LL_Init>

  return USBD_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
 8005d6a:	e001      	b.n	8005d70 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fa fe8d 	bl	8000aa4 <USBD_LL_Start>

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005db4:	2302      	movs	r3, #2
 8005db6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 feca 	bl	8006bb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d00c      	beq.n	8005e62 <USBD_LL_SetupStage+0x56>
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d302      	bcc.n	8005e52 <USBD_LL_SetupStage+0x46>
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d010      	beq.n	8005e72 <USBD_LL_SetupStage+0x66>
 8005e50:	e017      	b.n	8005e82 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9ca 	bl	80061f4 <USBD_StdDevReq>
      break;
 8005e60:	e01a      	b.n	8005e98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa2c 	bl	80062c8 <USBD_StdItfReq>
      break;
 8005e70:	e012      	b.n	8005e98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa6a 	bl	8006354 <USBD_StdEPReq>
      break;
 8005e80:	e00a      	b.n	8005e98 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fa fe67 	bl	8000b64 <USBD_LL_StallEP>
      break;
 8005e96:	bf00      	nop
  }

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14b      	bne.n	8005f4e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ebc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d134      	bne.n	8005f32 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d919      	bls.n	8005f08 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d203      	bcs.n	8005ef6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	e002      	b.n	8005efc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ff4b 	bl	8006d9c <USBD_CtlContinueRx>
 8005f06:	e038      	b.n	8005f7a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d105      	bne.n	8005f2a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 ff48 	bl	8006dc0 <USBD_CtlSendStatus>
 8005f30:	e023      	b.n	8005f7a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d11e      	bne.n	8005f7a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7fa fe0c 	bl	8000b64 <USBD_LL_StallEP>
 8005f4c:	e015      	b.n	8005f7a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d108      	bne.n	8005f76 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	7afa      	ldrb	r2, [r7, #11]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	4798      	blx	r3
 8005f74:	e001      	b.n	8005f7a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f76:	2302      	movs	r3, #2
 8005f78:	e000      	b.n	8005f7c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d17f      	bne.n	8006098 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d15c      	bne.n	8006062 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d915      	bls.n	8005fe0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	1ad2      	subs	r2, r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 feb5 	bl	8006d3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7fa fe68 	bl	8000cae <USBD_LL_PrepareReceive>
 8005fde:	e04e      	b.n	800607e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	6912      	ldr	r2, [r2, #16]
 8005fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fec:	fb02 f201 	mul.w	r2, r2, r1
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d11c      	bne.n	8006030 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d316      	bcc.n	8006030 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800600c:	429a      	cmp	r2, r3
 800600e:	d20f      	bcs.n	8006030 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fe91 	bl	8006d3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006022:	2300      	movs	r3, #0
 8006024:	2200      	movs	r2, #0
 8006026:	2100      	movs	r1, #0
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7fa fe40 	bl	8000cae <USBD_LL_PrepareReceive>
 800602e:	e026      	b.n	800607e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006042:	2b03      	cmp	r3, #3
 8006044:	d105      	bne.n	8006052 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7fa fd85 	bl	8000b64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fec3 	bl	8006de6 <USBD_CtlReceiveStatus>
 8006060:	e00d      	b.n	800607e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006068:	2b04      	cmp	r3, #4
 800606a:	d004      	beq.n	8006076 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7fa fd73 	bl	8000b64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11d      	bne.n	80060c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fe83 	bl	8005d94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006096:	e015      	b.n	80060c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00d      	beq.n	80060c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d108      	bne.n	80060c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	7afa      	ldrb	r2, [r7, #11]
 80060b8:	4611      	mov	r1, r2
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	4798      	blx	r3
 80060be:	e001      	b.n	80060c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060c0:	2302      	movs	r3, #2
 80060c2:	e000      	b.n	80060c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	2200      	movs	r2, #0
 80060da:	2100      	movs	r1, #0
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fa fcfc 	bl	8000ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2240      	movs	r2, #64	; 0x40
 80060ee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa fcee 	bl	8000ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6852      	ldr	r2, [r2, #4]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	4611      	mov	r1, r2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2204      	movs	r2, #4
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d105      	bne.n	80061b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d10b      	bne.n	80061ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620a:	2b20      	cmp	r3, #32
 800620c:	d004      	beq.n	8006218 <USBD_StdDevReq+0x24>
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d002      	beq.n	8006218 <USBD_StdDevReq+0x24>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <USBD_StdDevReq+0x34>
 8006216:	e04c      	b.n	80062b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
      break;
 8006226:	e049      	b.n	80062bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b09      	cmp	r3, #9
 800622e:	d83a      	bhi.n	80062a6 <USBD_StdDevReq+0xb2>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <USBD_StdDevReq+0x44>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	08006289 	.word	0x08006289
 800623c:	0800629d 	.word	0x0800629d
 8006240:	080062a7 	.word	0x080062a7
 8006244:	08006293 	.word	0x08006293
 8006248:	080062a7 	.word	0x080062a7
 800624c:	0800626b 	.word	0x0800626b
 8006250:	08006261 	.word	0x08006261
 8006254:	080062a7 	.word	0x080062a7
 8006258:	0800627f 	.word	0x0800627f
 800625c:	08006275 	.word	0x08006275
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9d4 	bl	8006610 <USBD_GetDescriptor>
          break;
 8006268:	e022      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fb37 	bl	80068e0 <USBD_SetAddress>
          break;
 8006272:	e01d      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb74 	bl	8006964 <USBD_SetConfig>
          break;
 800627c:	e018      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fbfd 	bl	8006a80 <USBD_GetConfig>
          break;
 8006286:	e013      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc2c 	bl	8006ae8 <USBD_GetStatus>
          break;
 8006290:	e00e      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc5a 	bl	8006b4e <USBD_SetFeature>
          break;
 800629a:	e009      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc69 	bl	8006b76 <USBD_ClrFeature>
          break;
 80062a4:	e004      	b.n	80062b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcc1 	bl	8006c30 <USBD_CtlError>
          break;
 80062ae:	bf00      	nop
      }
      break;
 80062b0:	e004      	b.n	80062bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fcbb 	bl	8006c30 <USBD_CtlError>
      break;
 80062ba:	bf00      	nop
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d003      	beq.n	80062ea <USBD_StdItfReq+0x22>
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d001      	beq.n	80062ea <USBD_StdItfReq+0x22>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d12a      	bne.n	8006340 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d81d      	bhi.n	8006332 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	889b      	ldrh	r3, [r3, #4]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d813      	bhi.n	8006328 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	4603      	mov	r3, r0
 8006310:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88db      	ldrh	r3, [r3, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d110      	bne.n	800633c <USBD_StdItfReq+0x74>
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10d      	bne.n	800633c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fd4d 	bl	8006dc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006326:	e009      	b.n	800633c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fc80 	bl	8006c30 <USBD_CtlError>
          break;
 8006330:	e004      	b.n	800633c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fc7b 	bl	8006c30 <USBD_CtlError>
          break;
 800633a:	e000      	b.n	800633e <USBD_StdItfReq+0x76>
          break;
 800633c:	bf00      	nop
      }
      break;
 800633e:	e004      	b.n	800634a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fc74 	bl	8006c30 <USBD_CtlError>
      break;
 8006348:	bf00      	nop
  }

  return USBD_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	889b      	ldrh	r3, [r3, #4]
 8006366:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006370:	2b20      	cmp	r3, #32
 8006372:	d004      	beq.n	800637e <USBD_StdEPReq+0x2a>
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d002      	beq.n	800637e <USBD_StdEPReq+0x2a>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <USBD_StdEPReq+0x3a>
 800637c:	e13d      	b.n	80065fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
      break;
 800638c:	e13a      	b.n	8006604 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006396:	2b20      	cmp	r3, #32
 8006398:	d10a      	bne.n	80063b0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	e12a      	b.n	8006606 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d03e      	beq.n	8006436 <USBD_StdEPReq+0xe2>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d002      	beq.n	80063c2 <USBD_StdEPReq+0x6e>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d070      	beq.n	80064a2 <USBD_StdEPReq+0x14e>
 80063c0:	e115      	b.n	80065ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d002      	beq.n	80063d2 <USBD_StdEPReq+0x7e>
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d015      	beq.n	80063fc <USBD_StdEPReq+0xa8>
 80063d0:	e02b      	b.n	800642a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00c      	beq.n	80063f2 <USBD_StdEPReq+0x9e>
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d009      	beq.n	80063f2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fa fbbe 	bl	8000b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fa fbba 	bl	8000b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063f0:	e020      	b.n	8006434 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fc1b 	bl	8006c30 <USBD_CtlError>
              break;
 80063fa:	e01b      	b.n	8006434 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10e      	bne.n	8006422 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <USBD_StdEPReq+0xce>
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b80      	cmp	r3, #128	; 0x80
 800640e:	d008      	beq.n	8006422 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	88db      	ldrh	r3, [r3, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fa fba1 	bl	8000b64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fccc 	bl	8006dc0 <USBD_CtlSendStatus>

              break;
 8006428:	e004      	b.n	8006434 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbff 	bl	8006c30 <USBD_CtlError>
              break;
 8006432:	bf00      	nop
          }
          break;
 8006434:	e0e0      	b.n	80065f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643c:	2b02      	cmp	r3, #2
 800643e:	d002      	beq.n	8006446 <USBD_StdEPReq+0xf2>
 8006440:	2b03      	cmp	r3, #3
 8006442:	d015      	beq.n	8006470 <USBD_StdEPReq+0x11c>
 8006444:	e026      	b.n	8006494 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <USBD_StdEPReq+0x112>
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d009      	beq.n	8006466 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fa fb84 	bl	8000b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fa fb80 	bl	8000b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006464:	e01c      	b.n	80064a0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fbe1 	bl	8006c30 <USBD_CtlError>
              break;
 800646e:	e017      	b.n	80064a0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	885b      	ldrh	r3, [r3, #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d112      	bne.n	800649e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fa fb8b 	bl	8000ba2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc97 	bl	8006dc0 <USBD_CtlSendStatus>
              }
              break;
 8006492:	e004      	b.n	800649e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fbca 	bl	8006c30 <USBD_CtlError>
              break;
 800649c:	e000      	b.n	80064a0 <USBD_StdEPReq+0x14c>
              break;
 800649e:	bf00      	nop
          }
          break;
 80064a0:	e0aa      	b.n	80065f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d002      	beq.n	80064b2 <USBD_StdEPReq+0x15e>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d032      	beq.n	8006516 <USBD_StdEPReq+0x1c2>
 80064b0:	e097      	b.n	80065e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <USBD_StdEPReq+0x174>
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d004      	beq.n	80064c8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fbb5 	bl	8006c30 <USBD_CtlError>
                break;
 80064c6:	e091      	b.n	80065ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da0b      	bge.n	80064e8 <USBD_StdEPReq+0x194>
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	3310      	adds	r3, #16
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	e00b      	b.n	8006500 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2202      	movs	r2, #2
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fbf8 	bl	8006d04 <USBD_CtlSendData>
              break;
 8006514:	e06a      	b.n	80065ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651a:	2b00      	cmp	r3, #0
 800651c:	da11      	bge.n	8006542 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3318      	adds	r3, #24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d117      	bne.n	8006568 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fb78 	bl	8006c30 <USBD_CtlError>
                  break;
 8006540:	e054      	b.n	80065ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	f003 020f 	and.w	r2, r3, #15
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fb65 	bl	8006c30 <USBD_CtlError>
                  break;
 8006566:	e041      	b.n	80065ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0b      	bge.n	8006588 <USBD_StdEPReq+0x234>
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3310      	adds	r3, #16
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	e00b      	b.n	80065a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	3304      	adds	r3, #4
 80065a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <USBD_StdEPReq+0x25a>
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d103      	bne.n	80065b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e00e      	b.n	80065d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fa fb10 	bl	8000be0 <USBD_LL_IsStallEP>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e002      	b.n	80065d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2202      	movs	r2, #2
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb92 	bl	8006d04 <USBD_CtlSendData>
              break;
 80065e0:	e004      	b.n	80065ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb23 	bl	8006c30 <USBD_CtlError>
              break;
 80065ea:	bf00      	nop
          }
          break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fb1d 	bl	8006c30 <USBD_CtlError>
          break;
 80065f6:	bf00      	nop
      }
      break;
 80065f8:	e004      	b.n	8006604 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb17 	bl	8006c30 <USBD_CtlError>
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	885b      	ldrh	r3, [r3, #2]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	2b06      	cmp	r3, #6
 8006632:	f200 8128 	bhi.w	8006886 <USBD_GetDescriptor+0x276>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <USBD_GetDescriptor+0x2c>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006659 	.word	0x08006659
 8006640:	08006671 	.word	0x08006671
 8006644:	080066b1 	.word	0x080066b1
 8006648:	08006887 	.word	0x08006887
 800664c:	08006887 	.word	0x08006887
 8006650:	08006827 	.word	0x08006827
 8006654:	08006853 	.word	0x08006853
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7c12      	ldrb	r2, [r2, #16]
 8006664:	f107 0108 	add.w	r1, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
      break;
 800666e:	e112      	b.n	8006896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7c1b      	ldrb	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	2202      	movs	r2, #2
 8006690:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006692:	e100      	b.n	8006896 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	f107 0208 	add.w	r2, r7, #8
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	2202      	movs	r2, #2
 80066ac:	701a      	strb	r2, [r3, #0]
      break;
 80066ae:	e0f2      	b.n	8006896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	885b      	ldrh	r3, [r3, #2]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	f200 80ac 	bhi.w	8006814 <USBD_GetDescriptor+0x204>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <USBD_GetDescriptor+0xb4>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	08006711 	.word	0x08006711
 80066cc:	08006745 	.word	0x08006745
 80066d0:	08006779 	.word	0x08006779
 80066d4:	080067ad 	.word	0x080067ad
 80066d8:	080067e1 	.word	0x080067e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fe:	e091      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa94 	bl	8006c30 <USBD_CtlError>
            err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
          break;
 800670e:	e089      	b.n	8006824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006732:	e077      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa7a 	bl	8006c30 <USBD_CtlError>
            err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
          break;
 8006742:	e06f      	b.n	8006824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 0108 	add.w	r1, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006766:	e05d      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa60 	bl	8006c30 <USBD_CtlError>
            err++;
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	3301      	adds	r3, #1
 8006774:	72fb      	strb	r3, [r7, #11]
          break;
 8006776:	e055      	b.n	8006824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7c12      	ldrb	r2, [r2, #16]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679a:	e043      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa46 	bl	8006c30 <USBD_CtlError>
            err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
          break;
 80067aa:	e03b      	b.n	8006824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	7c12      	ldrb	r2, [r2, #16]
 80067c4:	f107 0108 	add.w	r1, r7, #8
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
 80067cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ce:	e029      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa2c 	bl	8006c30 <USBD_CtlError>
            err++;
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	3301      	adds	r3, #1
 80067dc:	72fb      	strb	r3, [r7, #11]
          break;
 80067de:	e021      	b.n	8006824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7c12      	ldrb	r2, [r2, #16]
 80067f8:	f107 0108 	add.w	r1, r7, #8
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006802:	e00f      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa12 	bl	8006c30 <USBD_CtlError>
            err++;
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	3301      	adds	r3, #1
 8006810:	72fb      	strb	r3, [r7, #11]
          break;
 8006812:	e007      	b.n	8006824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa0a 	bl	8006c30 <USBD_CtlError>
          err++;
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	3301      	adds	r3, #1
 8006820:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006822:	e038      	b.n	8006896 <USBD_GetDescriptor+0x286>
 8006824:	e037      	b.n	8006896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	7c1b      	ldrb	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	f107 0208 	add.w	r2, r7, #8
 800683a:	4610      	mov	r0, r2
 800683c:	4798      	blx	r3
 800683e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006840:	e029      	b.n	8006896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f9f3 	bl	8006c30 <USBD_CtlError>
        err++;
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	3301      	adds	r3, #1
 800684e:	72fb      	strb	r3, [r7, #11]
      break;
 8006850:	e021      	b.n	8006896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7c1b      	ldrb	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10d      	bne.n	8006876 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f107 0208 	add.w	r2, r7, #8
 8006866:	4610      	mov	r0, r2
 8006868:	4798      	blx	r3
 800686a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	2207      	movs	r2, #7
 8006872:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006874:	e00f      	b.n	8006896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f9d9 	bl	8006c30 <USBD_CtlError>
        err++;
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	3301      	adds	r3, #1
 8006882:	72fb      	strb	r3, [r7, #11]
      break;
 8006884:	e007      	b.n	8006896 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f9d1 	bl	8006c30 <USBD_CtlError>
      err++;
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	3301      	adds	r3, #1
 8006892:	72fb      	strb	r3, [r7, #11]
      break;
 8006894:	bf00      	nop
  }

  if (err != 0U)
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d11c      	bne.n	80068d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800689c:	893b      	ldrh	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <USBD_GetDescriptor+0x2b6>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00d      	beq.n	80068c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88da      	ldrh	r2, [r3, #6]
 80068ae:	893b      	ldrh	r3, [r7, #8]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bf28      	it	cs
 80068b4:	4613      	movcs	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068ba:	893b      	ldrh	r3, [r7, #8]
 80068bc:	461a      	mov	r2, r3
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa1f 	bl	8006d04 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	88db      	ldrh	r3, [r3, #6]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa76 	bl	8006dc0 <USBD_CtlSendStatus>
 80068d4:	e000      	b.n	80068d8 <USBD_GetDescriptor+0x2c8>
    return;
 80068d6:	bf00      	nop
    }
  }
}
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop

080068e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	889b      	ldrh	r3, [r3, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d130      	bne.n	8006954 <USBD_SetAddress+0x74>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d12c      	bne.n	8006954 <USBD_SetAddress+0x74>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006900:	d828      	bhi.n	8006954 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006914:	2b03      	cmp	r3, #3
 8006916:	d104      	bne.n	8006922 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f988 	bl	8006c30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006920:	e01c      	b.n	800695c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	7bfa      	ldrb	r2, [r7, #15]
 8006926:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa f97b 	bl	8000c2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa43 	bl	8006dc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006948:	e008      	b.n	800695c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006952:	e003      	b.n	800695c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f96a 	bl	8006c30 <USBD_CtlError>
  }
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <USBD_SetConfig+0x118>)
 8006976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006978:	4b40      	ldr	r3, [pc, #256]	; (8006a7c <USBD_SetConfig+0x118>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d904      	bls.n	800698a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f954 	bl	8006c30 <USBD_CtlError>
 8006988:	e075      	b.n	8006a76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	2b02      	cmp	r3, #2
 8006992:	d002      	beq.n	800699a <USBD_SetConfig+0x36>
 8006994:	2b03      	cmp	r3, #3
 8006996:	d023      	beq.n	80069e0 <USBD_SetConfig+0x7c>
 8006998:	e062      	b.n	8006a60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800699a:	4b38      	ldr	r3, [pc, #224]	; (8006a7c <USBD_SetConfig+0x118>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01a      	beq.n	80069d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80069a2:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <USBD_SetConfig+0x118>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2203      	movs	r2, #3
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069b4:	4b31      	ldr	r3, [pc, #196]	; (8006a7c <USBD_SetConfig+0x118>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f9f4 	bl	8005da8 <USBD_SetClassConfig>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d104      	bne.n	80069d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f931 	bl	8006c30 <USBD_CtlError>
            return;
 80069ce:	e052      	b.n	8006a76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f9f5 	bl	8006dc0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069d6:	e04e      	b.n	8006a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f9f1 	bl	8006dc0 <USBD_CtlSendStatus>
        break;
 80069de:	e04a      	b.n	8006a76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069e0:	4b26      	ldr	r3, [pc, #152]	; (8006a7c <USBD_SetConfig+0x118>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d112      	bne.n	8006a0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80069f0:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <USBD_SetConfig+0x118>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069fa:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <USBD_SetConfig+0x118>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff f9f0 	bl	8005de6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9da 	bl	8006dc0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a0c:	e033      	b.n	8006a76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <USBD_SetConfig+0x118>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d01d      	beq.n	8006a58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff f9de 	bl	8005de6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <USBD_SetConfig+0x118>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a34:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <USBD_SetConfig+0x118>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff f9b4 	bl	8005da8 <USBD_SetClassConfig>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d104      	bne.n	8006a50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8f1 	bl	8006c30 <USBD_CtlError>
            return;
 8006a4e:	e012      	b.n	8006a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f9b5 	bl	8006dc0 <USBD_CtlSendStatus>
        break;
 8006a56:	e00e      	b.n	8006a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9b1 	bl	8006dc0 <USBD_CtlSendStatus>
        break;
 8006a5e:	e00a      	b.n	8006a76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8e4 	bl	8006c30 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a68:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <USBD_SetConfig+0x118>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff f9b9 	bl	8005de6 <USBD_ClrClassConfig>
        break;
 8006a74:	bf00      	nop
    }
  }
}
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	2000135c 	.word	0x2000135c

08006a80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d004      	beq.n	8006a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8cb 	bl	8006c30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a9a:	e021      	b.n	8006ae0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	db17      	blt.n	8006ad6 <USBD_GetConfig+0x56>
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	dd02      	ble.n	8006ab0 <USBD_GetConfig+0x30>
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d00b      	beq.n	8006ac6 <USBD_GetConfig+0x46>
 8006aae:	e012      	b.n	8006ad6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	2201      	movs	r2, #1
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f920 	bl	8006d04 <USBD_CtlSendData>
        break;
 8006ac4:	e00c      	b.n	8006ae0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	2201      	movs	r2, #1
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f918 	bl	8006d04 <USBD_CtlSendData>
        break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8a9 	bl	8006c30 <USBD_CtlError>
        break;
 8006ade:	bf00      	nop
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	3b01      	subs	r3, #1
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d81e      	bhi.n	8006b3c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d004      	beq.n	8006b10 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f891 	bl	8006c30 <USBD_CtlError>
        break;
 8006b0e:	e01a      	b.n	8006b46 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f043 0202 	orr.w	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	2202      	movs	r2, #2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8e5 	bl	8006d04 <USBD_CtlSendData>
      break;
 8006b3a:	e004      	b.n	8006b46 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f876 	bl	8006c30 <USBD_CtlError>
      break;
 8006b44:	bf00      	nop
  }
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d106      	bne.n	8006b6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f929 	bl	8006dc0 <USBD_CtlSendStatus>
  }
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b86:	3b01      	subs	r3, #1
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d80b      	bhi.n	8006ba4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10c      	bne.n	8006bae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f90f 	bl	8006dc0 <USBD_CtlSendStatus>
      }
      break;
 8006ba2:	e004      	b.n	8006bae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f842 	bl	8006c30 <USBD_CtlError>
      break;
 8006bac:	e000      	b.n	8006bb0 <USBD_ClrFeature+0x3a>
      break;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785a      	ldrb	r2, [r3, #1]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	3303      	adds	r3, #3
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4413      	add	r3, r2
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3305      	adds	r3, #5
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	3306      	adds	r3, #6
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	3307      	adds	r3, #7
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	80da      	strh	r2, [r3, #6]

}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7f9 ff91 	bl	8000b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7f9 ff8d 	bl	8000b64 <USBD_LL_StallEP>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b086      	sub	sp, #24
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d032      	beq.n	8006cce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f834 	bl	8006cd6 <USBD_GetLen>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	3301      	adds	r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	75fa      	strb	r2, [r7, #23]
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	75fa      	strb	r2, [r7, #23]
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c9e:	e012      	b.n	8006cc6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	60fa      	str	r2, [r7, #12]
 8006ca6:	7dfa      	ldrb	r2, [r7, #23]
 8006ca8:	1c51      	adds	r1, r2, #1
 8006caa:	75f9      	strb	r1, [r7, #23]
 8006cac:	4611      	mov	r1, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	75fa      	strb	r2, [r7, #23]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e8      	bne.n	8006ca0 <USBD_GetString+0x4e>
    }
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006ce2:	e005      	b.n	8006cf0 <USBD_GetLen+0x1a>
  {
    len++;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3301      	adds	r3, #1
 8006cee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f5      	bne.n	8006ce4 <USBD_GetLen+0xe>
  }

  return len;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7f9 ff9b 	bl	8000c68 <USBD_LL_Transmit>

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7f9 ff89 	bl	8000c68 <USBD_LL_Transmit>

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2203      	movs	r2, #3
 8006d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7f9 ff8e 	bl	8000cae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	2100      	movs	r1, #0
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7f9 ff7c 	bl	8000cae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7f9 ff46 	bl	8000c68 <USBD_LL_Transmit>

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2205      	movs	r2, #5
 8006df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df6:	2300      	movs	r3, #0
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7f9 ff56 	bl	8000cae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	2500      	movs	r5, #0
 8006e10:	4e0c      	ldr	r6, [pc, #48]	; (8006e44 <__libc_init_array+0x38>)
 8006e12:	4c0d      	ldr	r4, [pc, #52]	; (8006e48 <__libc_init_array+0x3c>)
 8006e14:	1ba4      	subs	r4, r4, r6
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	f000 f822 	bl	8006e64 <_init>
 8006e20:	2500      	movs	r5, #0
 8006e22:	4e0a      	ldr	r6, [pc, #40]	; (8006e4c <__libc_init_array+0x40>)
 8006e24:	4c0a      	ldr	r4, [pc, #40]	; (8006e50 <__libc_init_array+0x44>)
 8006e26:	1ba4      	subs	r4, r4, r6
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	42a5      	cmp	r5, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e34:	4798      	blx	r3
 8006e36:	3501      	adds	r5, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e3e:	4798      	blx	r3
 8006e40:	3501      	adds	r5, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006f18 	.word	0x08006f18
 8006e48:	08006f18 	.word	0x08006f18
 8006e4c:	08006f18 	.word	0x08006f18
 8006e50:	08006f1c 	.word	0x08006f1c

08006e54 <memset>:
 8006e54:	4603      	mov	r3, r0
 8006e56:	4402      	add	r2, r0
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d100      	bne.n	8006e5e <memset+0xa>
 8006e5c:	4770      	bx	lr
 8006e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e62:	e7f9      	b.n	8006e58 <memset+0x4>

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
